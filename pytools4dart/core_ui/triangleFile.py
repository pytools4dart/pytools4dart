#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sun Mar 31 19:31:17 2019 by generateDS.py version 2.29.25.
# Python 2.7.3 (default, Oct 26 2016, 21:01:49)  [GCC 4.6.3]
#
# Command line options:
#   ('-m', '')
#   ('-f', '')
#   ('--always-export-default', '')
#   ('--export', 'write literal etree')
#   ('-u', 'core_ui.user_methods')
#   ('-p', 'create')
#   ('--post-attrib-setter', "update_node(self,self.troot,'triangleFile')")
#   ('--pre-ctor', "self.troot=get_gs_troot('triangleFile','{classname}')")
#   ('--post-ctor', "update_node(self,self.troot,'triangleFile')")
#   ('--imports', 'from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes')
#   ('-o', '/media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/core_ui/triangleFile.py')
#
# Command line arguments:
#   /media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/xsdschemas/triangleFile.xsd
#
# Command line:
#   /media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/venv/bin/generateDS.py -m -f --always-export-default --export="write literal etree" -u "core_ui.user_methods" -p "create" --post-attrib-setter="update_node(self,self.troot,'triangleFile')" --pre-ctor="self.troot=get_gs_troot('triangleFile','{classname}')" --post-ctor="update_node(self,self.troot,'triangleFile')" --imports="from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes" -o "/media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/core_ui/triangleFile.py" /media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/xsdschemas/triangleFile.xsd
#
# Current working directory (os.getcwd()):
#   pytools4dart
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_
from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#

def checkclass(value, cl):
    if isinstance(value, list):
        for v in value:
            if not isinstance(v, cl):
                raise ValueError("invalid class")
    else:
        if not isinstance(value, cl):
            raise ValueError("invalid class")

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class createDartFile(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('version', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('TriangleFile', '_TriangleFile', 0, 0, {u'maxOccurs': u'1', u'type': u'_TriangleFile', u'name': u'TriangleFile', u'minOccurs': u'1'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, version=None, TriangleFile=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','DartFile')
        self.attrib = ['version']
        self.children = ['TriangleFile']
        self.parent = None
        self._version = _cast(None, version)
        self._TriangleFile = TriangleFile
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, createDartFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if createDartFile.subclass:
            return createDartFile.subclass(*args_, **kwargs_)
        else:
            return createDartFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TriangleFile(self): return self._TriangleFile
    def set_TriangleFile(self, value):
        if value is not None:
            checkclass(value, create_TriangleFile)
            value.parent = self
        self._TriangleFile = value
    TriangleFile = property(get_TriangleFile, set_TriangleFile)
    def get_version(self): return self._version
    def set_version(self, value):
        self._version = value
        update_node(self,self.troot,'triangleFile')
    version = property(get_version, set_version)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.TriangleFile is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DartFile', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DartFile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DartFile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DartFile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DartFile'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DartFile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TriangleFile is not None:
            self.TriangleFile.export(outfile, level, namespaceprefix_, name_='TriangleFile', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='DartFile', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.version is not None:
            element.set('version', self.gds_format_string(self.version))
        if self.TriangleFile is not None:
            TriangleFile_ = self.TriangleFile
            TriangleFile_.to_etree(element, name_='TriangleFile', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='DartFile'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TriangleFile is not None:
            showIndent(outfile, level)
            outfile.write('TriangleFile=model_._TriangleFile(\n')
            self.TriangleFile.exportLiteral(outfile, level, name_='TriangleFile')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TriangleFile':
            obj_ = create_TriangleFile.factory()
            obj_.build(child_)
            self.set_TriangleFile(obj_)
            obj_.original_tagname_ = 'TriangleFile'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class createDartFile


class create_TriangleFile(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('triangleStorageMode', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('Object', '_Object', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'_Object', u'name': u'Object', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, triangleStorageMode=0, Object=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_TriangleFile')
        self.attrib = ['triangleStorageMode']
        self.children = ['Object']
        self.parent = None
        self._triangleStorageMode = _cast(int, triangleStorageMode)
        if Object is None:
            self._Object = []
        else:
            self._Object = Object
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_TriangleFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_TriangleFile.subclass:
            return create_TriangleFile.subclass(*args_, **kwargs_)
        else:
            return create_TriangleFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Object(self): return self._Object
    def set_Object(self, value):
        if value is not None:
            checkclass(value, create_Object)
            for v in value:
                v.parent = self
        self._Object = value
    def add_Object(self, value):
        value.parent = self
        self._Object.append(value)
    def insert_Object_at(self, index, value):
        value.parent = self
        self.Object.insert(index, value)
    def replace_Object_at(self, index, value):
        value.parent = self
        self.Object[index] = value
    Object = property(get_Object, set_Object)
    def get_triangleStorageMode(self): return self._triangleStorageMode
    def set_triangleStorageMode(self, value):
        self._triangleStorageMode = value
        update_node(self,self.troot,'triangleFile')
    triangleStorageMode = property(get_triangleStorageMode, set_triangleStorageMode)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_TriangleFile', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_TriangleFile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_TriangleFile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_TriangleFile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_TriangleFile'):
        if self.triangleStorageMode is not None and 'triangleStorageMode' not in already_processed:
            already_processed.add('triangleStorageMode')
            outfile.write(' triangleStorageMode="%s"' % self.gds_format_integer(self.triangleStorageMode, input_name='triangleStorageMode'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_TriangleFile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Object_ in self.Object:
            Object_.export(outfile, level, namespaceprefix_, name_='Object', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_TriangleFile', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.triangleStorageMode is not None:
            element.set('triangleStorageMode', self.gds_format_integer(self.triangleStorageMode))
        for Object_ in self.Object:
            Object_.to_etree(element, name_='Object', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_TriangleFile'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.triangleStorageMode is not None and 'triangleStorageMode' not in already_processed:
            already_processed.add('triangleStorageMode')
            showIndent(outfile, level)
            outfile.write('triangleStorageMode=%d,\n' % (self.triangleStorageMode,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Object=[\n')
        level += 1
        for Object_ in self.Object:
            showIndent(outfile, level)
            outfile.write('model_._Object(\n')
            Object_.exportLiteral(outfile, level, name_='_Object')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.Object = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('triangleStorageMode', node)
        if value is not None and 'triangleStorageMode' not in already_processed:
            already_processed.add('triangleStorageMode')
            try:
                self.triangleStorageMode = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Object':
            obj_ = create_Object.factory()
            obj_.build(child_)
            self.add_Object(obj_)
            obj_.original_tagname_ = 'Object'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_TriangleFile


class create_Object(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('height', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('modeDSM', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('forcedLAI', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('forcedLAI_Surface_Value', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('repeatedOnBorder', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('Transformation', '_Transformation', 0, 0, {u'maxOccurs': u'1', u'type': u'_Transformation', u'name': u'Transformation', u'minOccurs': u'1'}, None),
        MemberSpec_('BoundingBox', '_BoundingBox', 0, 0, {u'maxOccurs': u'1', u'type': u'_BoundingBox', u'name': u'BoundingBox', u'minOccurs': u'1'}, None),
        MemberSpec_('TriangleList', '_TriangleList', 1, 0, {u'maxOccurs': u'unbounded', u'type': u'_TriangleList', u'name': u'TriangleList', u'minOccurs': u'1'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, height=None, modeDSM=0, forcedLAI=None, forcedLAI_Surface_Value=None, repeatedOnBorder=1, Transformation=None, BoundingBox=None, TriangleList=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_Object')
        self.attrib = ['height', 'modeDSM', 'forcedLAI', 'forcedLAI_Surface_Value', 'repeatedOnBorder']
        self.children = ['Transformation', 'BoundingBox', 'TriangleList']
        self.parent = None
        self._height = _cast(float, height)
        self._modeDSM = _cast(int, modeDSM)
        self._forcedLAI = _cast(int, forcedLAI)
        self._forcedLAI_Surface_Value = _cast(float, forcedLAI_Surface_Value)
        self._repeatedOnBorder = _cast(int, repeatedOnBorder)
        self._Transformation = Transformation
        self._BoundingBox = BoundingBox
        if TriangleList is None:
            self._TriangleList = []
        else:
            self._TriangleList = TriangleList
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_Object)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_Object.subclass:
            return create_Object.subclass(*args_, **kwargs_)
        else:
            return create_Object(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transformation(self): return self._Transformation
    def set_Transformation(self, value):
        if value is not None:
            checkclass(value, create_Transformation)
            value.parent = self
        self._Transformation = value
    Transformation = property(get_Transformation, set_Transformation)
    def get_BoundingBox(self): return self._BoundingBox
    def set_BoundingBox(self, value):
        if value is not None:
            checkclass(value, create_BoundingBox)
            value.parent = self
        self._BoundingBox = value
    BoundingBox = property(get_BoundingBox, set_BoundingBox)
    def get_TriangleList(self): return self._TriangleList
    def set_TriangleList(self, value):
        if value is not None:
            checkclass(value, create_TriangleList)
            for v in value:
                v.parent = self
        self._TriangleList = value
    def add_TriangleList(self, value):
        value.parent = self
        self._TriangleList.append(value)
    def insert_TriangleList_at(self, index, value):
        value.parent = self
        self.TriangleList.insert(index, value)
    def replace_TriangleList_at(self, index, value):
        value.parent = self
        self.TriangleList[index] = value
    TriangleList = property(get_TriangleList, set_TriangleList)
    def get_height(self): return self._height
    def set_height(self, value):
        self._height = value
        update_node(self,self.troot,'triangleFile')
    height = property(get_height, set_height)
    def get_modeDSM(self): return self._modeDSM
    def set_modeDSM(self, value):
        self._modeDSM = value
        update_node(self,self.troot,'triangleFile')
    modeDSM = property(get_modeDSM, set_modeDSM)
    def get_forcedLAI(self): return self._forcedLAI
    def set_forcedLAI(self, value):
        self._forcedLAI = value
        update_node(self,self.troot,'triangleFile')
    forcedLAI = property(get_forcedLAI, set_forcedLAI)
    def get_forcedLAI_Surface_Value(self): return self._forcedLAI_Surface_Value
    def set_forcedLAI_Surface_Value(self, value):
        self._forcedLAI_Surface_Value = value
        update_node(self,self.troot,'triangleFile')
    forcedLAI_Surface_Value = property(get_forcedLAI_Surface_Value, set_forcedLAI_Surface_Value)
    def get_repeatedOnBorder(self): return self._repeatedOnBorder
    def set_repeatedOnBorder(self, value):
        self._repeatedOnBorder = value
        update_node(self,self.troot,'triangleFile')
    repeatedOnBorder = property(get_repeatedOnBorder, set_repeatedOnBorder)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.Transformation is not None or
            self.BoundingBox is not None or
            self.TriangleList
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_Object', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_Object')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_Object')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_Object', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_Object'):
        if self.height is not None and 'height' not in already_processed:
            already_processed.add('height')
            outfile.write(' height="%s"' % self.gds_format_double(self.height, input_name='height'))
        if self.modeDSM is not None and 'modeDSM' not in already_processed:
            already_processed.add('modeDSM')
            outfile.write(' modeDSM="%s"' % self.gds_format_integer(self.modeDSM, input_name='modeDSM'))
        if self.forcedLAI is not None and 'forcedLAI' not in already_processed:
            already_processed.add('forcedLAI')
            outfile.write(' forcedLAI="%s"' % self.gds_format_integer(self.forcedLAI, input_name='forcedLAI'))
        if self.forcedLAI_Surface_Value is not None and 'forcedLAI_Surface_Value' not in already_processed:
            already_processed.add('forcedLAI_Surface_Value')
            outfile.write(' forcedLAI_Surface_Value="%s"' % self.gds_format_double(self.forcedLAI_Surface_Value, input_name='forcedLAI_Surface_Value'))
        if self.repeatedOnBorder is not None and 'repeatedOnBorder' not in already_processed:
            already_processed.add('repeatedOnBorder')
            outfile.write(' repeatedOnBorder="%s"' % self.gds_format_integer(self.repeatedOnBorder, input_name='repeatedOnBorder'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_Object', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transformation is not None:
            self.Transformation.export(outfile, level, namespaceprefix_, name_='Transformation', pretty_print=pretty_print)
        if self.BoundingBox is not None:
            self.BoundingBox.export(outfile, level, namespaceprefix_, name_='BoundingBox', pretty_print=pretty_print)
        for TriangleList_ in self.TriangleList:
            TriangleList_.export(outfile, level, namespaceprefix_, name_='TriangleList', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_Object', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.height is not None:
            element.set('height', self.gds_format_double(self.height))
        if self.modeDSM is not None:
            element.set('modeDSM', self.gds_format_integer(self.modeDSM))
        if self.forcedLAI is not None:
            element.set('forcedLAI', self.gds_format_integer(self.forcedLAI))
        if self.forcedLAI_Surface_Value is not None:
            element.set('forcedLAI_Surface_Value', self.gds_format_double(self.forcedLAI_Surface_Value))
        if self.repeatedOnBorder is not None:
            element.set('repeatedOnBorder', self.gds_format_integer(self.repeatedOnBorder))
        if self.Transformation is not None:
            Transformation_ = self.Transformation
            Transformation_.to_etree(element, name_='Transformation', mapping_=mapping_)
        if self.BoundingBox is not None:
            BoundingBox_ = self.BoundingBox
            BoundingBox_.to_etree(element, name_='BoundingBox', mapping_=mapping_)
        for TriangleList_ in self.TriangleList:
            TriangleList_.to_etree(element, name_='TriangleList', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_Object'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.height is not None and 'height' not in already_processed:
            already_processed.add('height')
            showIndent(outfile, level)
            outfile.write('height=%e,\n' % (self.height,))
        if self.modeDSM is not None and 'modeDSM' not in already_processed:
            already_processed.add('modeDSM')
            showIndent(outfile, level)
            outfile.write('modeDSM=%d,\n' % (self.modeDSM,))
        if self.forcedLAI is not None and 'forcedLAI' not in already_processed:
            already_processed.add('forcedLAI')
            showIndent(outfile, level)
            outfile.write('forcedLAI=%d,\n' % (self.forcedLAI,))
        if self.forcedLAI_Surface_Value is not None and 'forcedLAI_Surface_Value' not in already_processed:
            already_processed.add('forcedLAI_Surface_Value')
            showIndent(outfile, level)
            outfile.write('forcedLAI_Surface_Value=%e,\n' % (self.forcedLAI_Surface_Value,))
        if self.repeatedOnBorder is not None and 'repeatedOnBorder' not in already_processed:
            already_processed.add('repeatedOnBorder')
            showIndent(outfile, level)
            outfile.write('repeatedOnBorder=%d,\n' % (self.repeatedOnBorder,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transformation is not None:
            showIndent(outfile, level)
            outfile.write('Transformation=model_._Transformation(\n')
            self.Transformation.exportLiteral(outfile, level, name_='Transformation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BoundingBox is not None:
            showIndent(outfile, level)
            outfile.write('BoundingBox=model_._BoundingBox(\n')
            self.BoundingBox.exportLiteral(outfile, level, name_='BoundingBox')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('TriangleList=[\n')
        level += 1
        for TriangleList_ in self.TriangleList:
            showIndent(outfile, level)
            outfile.write('model_._TriangleList(\n')
            TriangleList_.exportLiteral(outfile, level, name_='_TriangleList')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.TriangleList = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('height', node)
        if value is not None and 'height' not in already_processed:
            already_processed.add('height')
            try:
                self.height = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (height): %s' % exp)
        value = find_attr_value_('modeDSM', node)
        if value is not None and 'modeDSM' not in already_processed:
            already_processed.add('modeDSM')
            try:
                self.modeDSM = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('forcedLAI', node)
        if value is not None and 'forcedLAI' not in already_processed:
            already_processed.add('forcedLAI')
            try:
                self.forcedLAI = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('forcedLAI_Surface_Value', node)
        if value is not None and 'forcedLAI_Surface_Value' not in already_processed:
            already_processed.add('forcedLAI_Surface_Value')
            try:
                self.forcedLAI_Surface_Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (forcedLAI_Surface_Value): %s' % exp)
        value = find_attr_value_('repeatedOnBorder', node)
        if value is not None and 'repeatedOnBorder' not in already_processed:
            already_processed.add('repeatedOnBorder')
            try:
                self.repeatedOnBorder = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transformation':
            obj_ = create_Transformation.factory()
            obj_.build(child_)
            self.set_Transformation(obj_)
            obj_.original_tagname_ = 'Transformation'
        elif nodeName_ == 'BoundingBox':
            obj_ = create_BoundingBox.factory()
            obj_.build(child_)
            self.set_BoundingBox(obj_)
            obj_.original_tagname_ = 'BoundingBox'
        elif nodeName_ == 'TriangleList':
            obj_ = create_TriangleList.factory()
            obj_.build(child_)
            self.add_TriangleList(obj_)
            obj_.original_tagname_ = 'TriangleList'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_Object


class create_Transformation(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('M00', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M01', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M02', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M10', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M11', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M12', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M20', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M21', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M22', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M03_xPos', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M13_yPos', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('M23_zPos', 'xsd:double', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, M00=None, M01=None, M02=None, M10=None, M11=None, M12=None, M20=None, M21=None, M22=None, M03_xPos=None, M13_yPos=None, M23_zPos=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_Transformation')
        self.attrib = ['M00', 'M01', 'M02', 'M10', 'M11', 'M12', 'M20', 'M21', 'M22', 'M03_xPos', 'M13_yPos', 'M23_zPos']
        self.children = []
        self.parent = None
        self._M00 = _cast(float, M00)
        self._M01 = _cast(float, M01)
        self._M02 = _cast(float, M02)
        self._M10 = _cast(float, M10)
        self._M11 = _cast(float, M11)
        self._M12 = _cast(float, M12)
        self._M20 = _cast(float, M20)
        self._M21 = _cast(float, M21)
        self._M22 = _cast(float, M22)
        self._M03_xPos = _cast(float, M03_xPos)
        self._M13_yPos = _cast(float, M13_yPos)
        self._M23_zPos = _cast(float, M23_zPos)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_Transformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_Transformation.subclass:
            return create_Transformation.subclass(*args_, **kwargs_)
        else:
            return create_Transformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_M00(self): return self._M00
    def set_M00(self, value):
        self._M00 = value
        update_node(self,self.troot,'triangleFile')
    M00 = property(get_M00, set_M00)
    def get_M01(self): return self._M01
    def set_M01(self, value):
        self._M01 = value
        update_node(self,self.troot,'triangleFile')
    M01 = property(get_M01, set_M01)
    def get_M02(self): return self._M02
    def set_M02(self, value):
        self._M02 = value
        update_node(self,self.troot,'triangleFile')
    M02 = property(get_M02, set_M02)
    def get_M10(self): return self._M10
    def set_M10(self, value):
        self._M10 = value
        update_node(self,self.troot,'triangleFile')
    M10 = property(get_M10, set_M10)
    def get_M11(self): return self._M11
    def set_M11(self, value):
        self._M11 = value
        update_node(self,self.troot,'triangleFile')
    M11 = property(get_M11, set_M11)
    def get_M12(self): return self._M12
    def set_M12(self, value):
        self._M12 = value
        update_node(self,self.troot,'triangleFile')
    M12 = property(get_M12, set_M12)
    def get_M20(self): return self._M20
    def set_M20(self, value):
        self._M20 = value
        update_node(self,self.troot,'triangleFile')
    M20 = property(get_M20, set_M20)
    def get_M21(self): return self._M21
    def set_M21(self, value):
        self._M21 = value
        update_node(self,self.troot,'triangleFile')
    M21 = property(get_M21, set_M21)
    def get_M22(self): return self._M22
    def set_M22(self, value):
        self._M22 = value
        update_node(self,self.troot,'triangleFile')
    M22 = property(get_M22, set_M22)
    def get_M03_xPos(self): return self._M03_xPos
    def set_M03_xPos(self, value):
        self._M03_xPos = value
        update_node(self,self.troot,'triangleFile')
    M03_xPos = property(get_M03_xPos, set_M03_xPos)
    def get_M13_yPos(self): return self._M13_yPos
    def set_M13_yPos(self, value):
        self._M13_yPos = value
        update_node(self,self.troot,'triangleFile')
    M13_yPos = property(get_M13_yPos, set_M13_yPos)
    def get_M23_zPos(self): return self._M23_zPos
    def set_M23_zPos(self, value):
        self._M23_zPos = value
        update_node(self,self.troot,'triangleFile')
    M23_zPos = property(get_M23_zPos, set_M23_zPos)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_Transformation', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_Transformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_Transformation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_Transformation', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_Transformation'):
        if self.M00 is not None and 'M00' not in already_processed:
            already_processed.add('M00')
            outfile.write(' M00="%s"' % self.gds_format_double(self.M00, input_name='M00'))
        if self.M01 is not None and 'M01' not in already_processed:
            already_processed.add('M01')
            outfile.write(' M01="%s"' % self.gds_format_double(self.M01, input_name='M01'))
        if self.M02 is not None and 'M02' not in already_processed:
            already_processed.add('M02')
            outfile.write(' M02="%s"' % self.gds_format_double(self.M02, input_name='M02'))
        if self.M10 is not None and 'M10' not in already_processed:
            already_processed.add('M10')
            outfile.write(' M10="%s"' % self.gds_format_double(self.M10, input_name='M10'))
        if self.M11 is not None and 'M11' not in already_processed:
            already_processed.add('M11')
            outfile.write(' M11="%s"' % self.gds_format_double(self.M11, input_name='M11'))
        if self.M12 is not None and 'M12' not in already_processed:
            already_processed.add('M12')
            outfile.write(' M12="%s"' % self.gds_format_double(self.M12, input_name='M12'))
        if self.M20 is not None and 'M20' not in already_processed:
            already_processed.add('M20')
            outfile.write(' M20="%s"' % self.gds_format_double(self.M20, input_name='M20'))
        if self.M21 is not None and 'M21' not in already_processed:
            already_processed.add('M21')
            outfile.write(' M21="%s"' % self.gds_format_double(self.M21, input_name='M21'))
        if self.M22 is not None and 'M22' not in already_processed:
            already_processed.add('M22')
            outfile.write(' M22="%s"' % self.gds_format_double(self.M22, input_name='M22'))
        if self.M03_xPos is not None and 'M03_xPos' not in already_processed:
            already_processed.add('M03_xPos')
            outfile.write(' M03_xPos="%s"' % self.gds_format_double(self.M03_xPos, input_name='M03_xPos'))
        if self.M13_yPos is not None and 'M13_yPos' not in already_processed:
            already_processed.add('M13_yPos')
            outfile.write(' M13_yPos="%s"' % self.gds_format_double(self.M13_yPos, input_name='M13_yPos'))
        if self.M23_zPos is not None and 'M23_zPos' not in already_processed:
            already_processed.add('M23_zPos')
            outfile.write(' M23_zPos="%s"' % self.gds_format_double(self.M23_zPos, input_name='M23_zPos'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_Transformation', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_Transformation', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.M00 is not None:
            element.set('M00', self.gds_format_double(self.M00))
        if self.M01 is not None:
            element.set('M01', self.gds_format_double(self.M01))
        if self.M02 is not None:
            element.set('M02', self.gds_format_double(self.M02))
        if self.M10 is not None:
            element.set('M10', self.gds_format_double(self.M10))
        if self.M11 is not None:
            element.set('M11', self.gds_format_double(self.M11))
        if self.M12 is not None:
            element.set('M12', self.gds_format_double(self.M12))
        if self.M20 is not None:
            element.set('M20', self.gds_format_double(self.M20))
        if self.M21 is not None:
            element.set('M21', self.gds_format_double(self.M21))
        if self.M22 is not None:
            element.set('M22', self.gds_format_double(self.M22))
        if self.M03_xPos is not None:
            element.set('M03_xPos', self.gds_format_double(self.M03_xPos))
        if self.M13_yPos is not None:
            element.set('M13_yPos', self.gds_format_double(self.M13_yPos))
        if self.M23_zPos is not None:
            element.set('M23_zPos', self.gds_format_double(self.M23_zPos))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_Transformation'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.M00 is not None and 'M00' not in already_processed:
            already_processed.add('M00')
            showIndent(outfile, level)
            outfile.write('M00=%e,\n' % (self.M00,))
        if self.M01 is not None and 'M01' not in already_processed:
            already_processed.add('M01')
            showIndent(outfile, level)
            outfile.write('M01=%e,\n' % (self.M01,))
        if self.M02 is not None and 'M02' not in already_processed:
            already_processed.add('M02')
            showIndent(outfile, level)
            outfile.write('M02=%e,\n' % (self.M02,))
        if self.M10 is not None and 'M10' not in already_processed:
            already_processed.add('M10')
            showIndent(outfile, level)
            outfile.write('M10=%e,\n' % (self.M10,))
        if self.M11 is not None and 'M11' not in already_processed:
            already_processed.add('M11')
            showIndent(outfile, level)
            outfile.write('M11=%e,\n' % (self.M11,))
        if self.M12 is not None and 'M12' not in already_processed:
            already_processed.add('M12')
            showIndent(outfile, level)
            outfile.write('M12=%e,\n' % (self.M12,))
        if self.M20 is not None and 'M20' not in already_processed:
            already_processed.add('M20')
            showIndent(outfile, level)
            outfile.write('M20=%e,\n' % (self.M20,))
        if self.M21 is not None and 'M21' not in already_processed:
            already_processed.add('M21')
            showIndent(outfile, level)
            outfile.write('M21=%e,\n' % (self.M21,))
        if self.M22 is not None and 'M22' not in already_processed:
            already_processed.add('M22')
            showIndent(outfile, level)
            outfile.write('M22=%e,\n' % (self.M22,))
        if self.M03_xPos is not None and 'M03_xPos' not in already_processed:
            already_processed.add('M03_xPos')
            showIndent(outfile, level)
            outfile.write('M03_xPos=%e,\n' % (self.M03_xPos,))
        if self.M13_yPos is not None and 'M13_yPos' not in already_processed:
            already_processed.add('M13_yPos')
            showIndent(outfile, level)
            outfile.write('M13_yPos=%e,\n' % (self.M13_yPos,))
        if self.M23_zPos is not None and 'M23_zPos' not in already_processed:
            already_processed.add('M23_zPos')
            showIndent(outfile, level)
            outfile.write('M23_zPos=%e,\n' % (self.M23_zPos,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('M00', node)
        if value is not None and 'M00' not in already_processed:
            already_processed.add('M00')
            try:
                self.M00 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M00): %s' % exp)
        value = find_attr_value_('M01', node)
        if value is not None and 'M01' not in already_processed:
            already_processed.add('M01')
            try:
                self.M01 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M01): %s' % exp)
        value = find_attr_value_('M02', node)
        if value is not None and 'M02' not in already_processed:
            already_processed.add('M02')
            try:
                self.M02 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M02): %s' % exp)
        value = find_attr_value_('M10', node)
        if value is not None and 'M10' not in already_processed:
            already_processed.add('M10')
            try:
                self.M10 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M10): %s' % exp)
        value = find_attr_value_('M11', node)
        if value is not None and 'M11' not in already_processed:
            already_processed.add('M11')
            try:
                self.M11 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M11): %s' % exp)
        value = find_attr_value_('M12', node)
        if value is not None and 'M12' not in already_processed:
            already_processed.add('M12')
            try:
                self.M12 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M12): %s' % exp)
        value = find_attr_value_('M20', node)
        if value is not None and 'M20' not in already_processed:
            already_processed.add('M20')
            try:
                self.M20 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M20): %s' % exp)
        value = find_attr_value_('M21', node)
        if value is not None and 'M21' not in already_processed:
            already_processed.add('M21')
            try:
                self.M21 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M21): %s' % exp)
        value = find_attr_value_('M22', node)
        if value is not None and 'M22' not in already_processed:
            already_processed.add('M22')
            try:
                self.M22 = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M22): %s' % exp)
        value = find_attr_value_('M03_xPos', node)
        if value is not None and 'M03_xPos' not in already_processed:
            already_processed.add('M03_xPos')
            try:
                self.M03_xPos = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M03_xPos): %s' % exp)
        value = find_attr_value_('M13_yPos', node)
        if value is not None and 'M13_yPos' not in already_processed:
            already_processed.add('M13_yPos')
            try:
                self.M13_yPos = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M13_yPos): %s' % exp)
        value = find_attr_value_('M23_zPos', node)
        if value is not None and 'M23_zPos' not in already_processed:
            already_processed.add('M23_zPos')
            try:
                self.M23_zPos = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (M23_zPos): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_Transformation


class create_BoundingBox(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('LowerCorner', '_LowerCorner', 0, 0, {u'maxOccurs': u'1', u'type': u'_LowerCorner', u'name': u'LowerCorner', u'minOccurs': u'1'}, None),
        MemberSpec_('UpperCorner', '_UpperCorner', 0, 0, {u'maxOccurs': u'1', u'type': u'_UpperCorner', u'name': u'UpperCorner', u'minOccurs': u'1'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, LowerCorner=None, UpperCorner=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_BoundingBox')
        self.attrib = ['']
        self.children = ['LowerCorner', 'UpperCorner']
        self.parent = None
        self._LowerCorner = LowerCorner
        self._UpperCorner = UpperCorner
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_BoundingBox)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_BoundingBox.subclass:
            return create_BoundingBox.subclass(*args_, **kwargs_)
        else:
            return create_BoundingBox(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LowerCorner(self): return self._LowerCorner
    def set_LowerCorner(self, value):
        if value is not None:
            checkclass(value, create_LowerCorner)
            value.parent = self
        self._LowerCorner = value
    LowerCorner = property(get_LowerCorner, set_LowerCorner)
    def get_UpperCorner(self): return self._UpperCorner
    def set_UpperCorner(self, value):
        if value is not None:
            checkclass(value, create_UpperCorner)
            value.parent = self
        self._UpperCorner = value
    UpperCorner = property(get_UpperCorner, set_UpperCorner)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.LowerCorner is not None or
            self.UpperCorner is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_BoundingBox', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_BoundingBox')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_BoundingBox')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_BoundingBox', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_BoundingBox'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_BoundingBox', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LowerCorner is not None:
            self.LowerCorner.export(outfile, level, namespaceprefix_, name_='LowerCorner', pretty_print=pretty_print)
        if self.UpperCorner is not None:
            self.UpperCorner.export(outfile, level, namespaceprefix_, name_='UpperCorner', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_BoundingBox', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.LowerCorner is not None:
            LowerCorner_ = self.LowerCorner
            LowerCorner_.to_etree(element, name_='LowerCorner', mapping_=mapping_)
        if self.UpperCorner is not None:
            UpperCorner_ = self.UpperCorner
            UpperCorner_.to_etree(element, name_='UpperCorner', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_BoundingBox'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LowerCorner is not None:
            showIndent(outfile, level)
            outfile.write('LowerCorner=model_._LowerCorner(\n')
            self.LowerCorner.exportLiteral(outfile, level, name_='LowerCorner')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.UpperCorner is not None:
            showIndent(outfile, level)
            outfile.write('UpperCorner=model_._UpperCorner(\n')
            self.UpperCorner.exportLiteral(outfile, level, name_='UpperCorner')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LowerCorner':
            obj_ = create_LowerCorner.factory()
            obj_.build(child_)
            self.set_LowerCorner(obj_)
            obj_.original_tagname_ = 'LowerCorner'
        elif nodeName_ == 'UpperCorner':
            obj_ = create_UpperCorner.factory()
            obj_.build(child_)
            self.set_UpperCorner(obj_)
            obj_.original_tagname_ = 'UpperCorner'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_BoundingBox


class create_LowerCorner(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('x', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('y', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('z', 'xsd:double', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, x=0., y=0., z=0.):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_LowerCorner')
        self.attrib = ['x', 'y', 'z']
        self.children = []
        self.parent = None
        self._x = _cast(float, x)
        self._y = _cast(float, y)
        self._z = _cast(float, z)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_LowerCorner)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_LowerCorner.subclass:
            return create_LowerCorner.subclass(*args_, **kwargs_)
        else:
            return create_LowerCorner(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_x(self): return self._x
    def set_x(self, value):
        self._x = value
        update_node(self,self.troot,'triangleFile')
    x = property(get_x, set_x)
    def get_y(self): return self._y
    def set_y(self, value):
        self._y = value
        update_node(self,self.troot,'triangleFile')
    y = property(get_y, set_y)
    def get_z(self): return self._z
    def set_z(self, value):
        self._z = value
        update_node(self,self.troot,'triangleFile')
    z = property(get_z, set_z)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_LowerCorner', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_LowerCorner')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_LowerCorner')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_LowerCorner', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_LowerCorner'):
        if self.x is not None and 'x' not in already_processed:
            already_processed.add('x')
            outfile.write(' x="%s"' % self.gds_format_double(self.x, input_name='x'))
        if self.y is not None and 'y' not in already_processed:
            already_processed.add('y')
            outfile.write(' y="%s"' % self.gds_format_double(self.y, input_name='y'))
        if self.z is not None and 'z' not in already_processed:
            already_processed.add('z')
            outfile.write(' z="%s"' % self.gds_format_double(self.z, input_name='z'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_LowerCorner', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_LowerCorner', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.x is not None:
            element.set('x', self.gds_format_double(self.x))
        if self.y is not None:
            element.set('y', self.gds_format_double(self.y))
        if self.z is not None:
            element.set('z', self.gds_format_double(self.z))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_LowerCorner'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.x is not None and 'x' not in already_processed:
            already_processed.add('x')
            showIndent(outfile, level)
            outfile.write('x=%e,\n' % (self.x,))
        if self.y is not None and 'y' not in already_processed:
            already_processed.add('y')
            showIndent(outfile, level)
            outfile.write('y=%e,\n' % (self.y,))
        if self.z is not None and 'z' not in already_processed:
            already_processed.add('z')
            showIndent(outfile, level)
            outfile.write('z=%e,\n' % (self.z,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('x', node)
        if value is not None and 'x' not in already_processed:
            already_processed.add('x')
            try:
                self.x = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (x): %s' % exp)
        value = find_attr_value_('y', node)
        if value is not None and 'y' not in already_processed:
            already_processed.add('y')
            try:
                self.y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (y): %s' % exp)
        value = find_attr_value_('z', node)
        if value is not None and 'z' not in already_processed:
            already_processed.add('z')
            try:
                self.z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (z): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_LowerCorner


class create_UpperCorner(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('x', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('y', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('z', 'xsd:double', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, x=0., y=0., z=0.):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_UpperCorner')
        self.attrib = ['x', 'y', 'z']
        self.children = []
        self.parent = None
        self._x = _cast(float, x)
        self._y = _cast(float, y)
        self._z = _cast(float, z)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_UpperCorner)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_UpperCorner.subclass:
            return create_UpperCorner.subclass(*args_, **kwargs_)
        else:
            return create_UpperCorner(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_x(self): return self._x
    def set_x(self, value):
        self._x = value
        update_node(self,self.troot,'triangleFile')
    x = property(get_x, set_x)
    def get_y(self): return self._y
    def set_y(self, value):
        self._y = value
        update_node(self,self.troot,'triangleFile')
    y = property(get_y, set_y)
    def get_z(self): return self._z
    def set_z(self, value):
        self._z = value
        update_node(self,self.troot,'triangleFile')
    z = property(get_z, set_z)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_UpperCorner', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_UpperCorner')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_UpperCorner')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_UpperCorner', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_UpperCorner'):
        if self.x is not None and 'x' not in already_processed:
            already_processed.add('x')
            outfile.write(' x="%s"' % self.gds_format_double(self.x, input_name='x'))
        if self.y is not None and 'y' not in already_processed:
            already_processed.add('y')
            outfile.write(' y="%s"' % self.gds_format_double(self.y, input_name='y'))
        if self.z is not None and 'z' not in already_processed:
            already_processed.add('z')
            outfile.write(' z="%s"' % self.gds_format_double(self.z, input_name='z'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_UpperCorner', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_UpperCorner', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.x is not None:
            element.set('x', self.gds_format_double(self.x))
        if self.y is not None:
            element.set('y', self.gds_format_double(self.y))
        if self.z is not None:
            element.set('z', self.gds_format_double(self.z))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_UpperCorner'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.x is not None and 'x' not in already_processed:
            already_processed.add('x')
            showIndent(outfile, level)
            outfile.write('x=%e,\n' % (self.x,))
        if self.y is not None and 'y' not in already_processed:
            already_processed.add('y')
            showIndent(outfile, level)
            outfile.write('y=%e,\n' % (self.y,))
        if self.z is not None and 'z' not in already_processed:
            already_processed.add('z')
            showIndent(outfile, level)
            outfile.write('z=%e,\n' % (self.z,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('x', node)
        if value is not None and 'x' not in already_processed:
            already_processed.add('x')
            try:
                self.x = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (x): %s' % exp)
        value = find_attr_value_('y', node)
        if value is not None and 'y' not in already_processed:
            already_processed.add('y')
            try:
                self.y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (y): %s' % exp)
        value = find_attr_value_('z', node)
        if value is not None and 'z' not in already_processed:
            already_processed.add('z')
            try:
                self.z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (z): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_UpperCorner


class create_TriangleList(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('type_', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('nbTriangles', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('modeDSM', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('name', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('doubleFace', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('IsLAICalc', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('LeafPF', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('ALASegmentation', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('forcedLAI', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('forcedLAI_Surface_Value', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('OpticalPropertyLink', '_OpticalPropertyLink', 0, 0, {u'maxOccurs': u'1', u'type': u'_OpticalPropertyLink', u'name': u'OpticalPropertyLink', u'minOccurs': u'1'}, None),
        MemberSpec_('BackFaceOpticalPropertyLink', '_BackFaceOpticalPropertyLink', 0, 1, {u'maxOccurs': u'1', u'type': u'_BackFaceOpticalPropertyLink', u'name': u'BackFaceOpticalPropertyLink', u'minOccurs': u'0'}, None),
        MemberSpec_('ThermalPropertyLink', '_ThermalPropertyLink', 0, 0, {u'maxOccurs': u'1', u'type': u'_ThermalPropertyLink', u'name': u'ThermalPropertyLink', u'minOccurs': u'1'}, None),
        MemberSpec_('BackFaceThermalPropertyLink', '_BackFaceThermalPropertyLink', 0, 1, {u'maxOccurs': u'1', u'type': u'_BackFaceThermalPropertyLink', u'name': u'BackFaceThermalPropertyLink', u'minOccurs': u'0'}, None),
        MemberSpec_('TRIFileReference', '_TRIFileReference', 0, 0, {u'maxOccurs': u'1', u'type': u'_TRIFileReference', u'name': u'TRIFileReference', u'minOccurs': u'1'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, type_=None, nbTriangles=0, modeDSM=0, name=None, doubleFace=None, IsLAICalc=None, LeafPF=None, ALASegmentation=None, forcedLAI=None, forcedLAI_Surface_Value=None, OpticalPropertyLink=None, BackFaceOpticalPropertyLink=None, ThermalPropertyLink=None, BackFaceThermalPropertyLink=None, TRIFileReference=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_TriangleList')
        self.attrib = ['type_', 'nbTriangles', 'modeDSM', 'name', 'doubleFace', 'IsLAICalc', 'LeafPF', 'ALASegmentation', 'forcedLAI', 'forcedLAI_Surface_Value']
        self.children = ['OpticalPropertyLink', 'BackFaceOpticalPropertyLink', 'ThermalPropertyLink', 'BackFaceThermalPropertyLink', 'TRIFileReference']
        self.parent = None
        self._type_ = _cast(int, type_)
        self._nbTriangles = _cast(int, nbTriangles)
        self._modeDSM = _cast(int, modeDSM)
        self._name = _cast(None, name)
        self._doubleFace = _cast(int, doubleFace)
        self._IsLAICalc = _cast(int, IsLAICalc)
        self._LeafPF = _cast(int, LeafPF)
        self._ALASegmentation = _cast(int, ALASegmentation)
        self._forcedLAI = _cast(int, forcedLAI)
        self._forcedLAI_Surface_Value = _cast(float, forcedLAI_Surface_Value)
        self._OpticalPropertyLink = OpticalPropertyLink
        self._BackFaceOpticalPropertyLink = BackFaceOpticalPropertyLink
        self._ThermalPropertyLink = ThermalPropertyLink
        self._BackFaceThermalPropertyLink = BackFaceThermalPropertyLink
        self._TRIFileReference = TRIFileReference
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_TriangleList)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_TriangleList.subclass:
            return create_TriangleList.subclass(*args_, **kwargs_)
        else:
            return create_TriangleList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OpticalPropertyLink(self): return self._OpticalPropertyLink
    def set_OpticalPropertyLink(self, value):
        if value is not None:
            checkclass(value, create_OpticalPropertyLink)
            value.parent = self
        self._OpticalPropertyLink = value
    OpticalPropertyLink = property(get_OpticalPropertyLink, set_OpticalPropertyLink)
    def get_BackFaceOpticalPropertyLink(self): return self._BackFaceOpticalPropertyLink
    def set_BackFaceOpticalPropertyLink(self, value):
        if value is not None:
            checkclass(value, create_BackFaceOpticalPropertyLink)
            value.parent = self
        self._BackFaceOpticalPropertyLink = value
    BackFaceOpticalPropertyLink = property(get_BackFaceOpticalPropertyLink, set_BackFaceOpticalPropertyLink)
    def get_ThermalPropertyLink(self): return self._ThermalPropertyLink
    def set_ThermalPropertyLink(self, value):
        if value is not None:
            checkclass(value, create_ThermalPropertyLink)
            value.parent = self
        self._ThermalPropertyLink = value
    ThermalPropertyLink = property(get_ThermalPropertyLink, set_ThermalPropertyLink)
    def get_BackFaceThermalPropertyLink(self): return self._BackFaceThermalPropertyLink
    def set_BackFaceThermalPropertyLink(self, value):
        if value is not None:
            checkclass(value, create_BackFaceThermalPropertyLink)
            value.parent = self
        self._BackFaceThermalPropertyLink = value
    BackFaceThermalPropertyLink = property(get_BackFaceThermalPropertyLink, set_BackFaceThermalPropertyLink)
    def get_TRIFileReference(self): return self._TRIFileReference
    def set_TRIFileReference(self, value):
        if value is not None:
            checkclass(value, create_TRIFileReference)
            value.parent = self
        self._TRIFileReference = value
    TRIFileReference = property(get_TRIFileReference, set_TRIFileReference)
    def get_type(self): return self._type_
    def set_type(self, value):
        self._type_ = value
        update_node(self,self.troot,'triangleFile')
    type_ = property(get_type, set_type)
    def get_nbTriangles(self): return self._nbTriangles
    def set_nbTriangles(self, value):
        self._nbTriangles = value
        update_node(self,self.troot,'triangleFile')
    nbTriangles = property(get_nbTriangles, set_nbTriangles)
    def get_modeDSM(self): return self._modeDSM
    def set_modeDSM(self, value):
        self._modeDSM = value
        update_node(self,self.troot,'triangleFile')
    modeDSM = property(get_modeDSM, set_modeDSM)
    def get_name(self): return self._name
    def set_name(self, value):
        self._name = value
        update_node(self,self.troot,'triangleFile')
    name = property(get_name, set_name)
    def get_doubleFace(self): return self._doubleFace
    def set_doubleFace(self, value):
        self._doubleFace = value
        update_node(self,self.troot,'triangleFile')
    doubleFace = property(get_doubleFace, set_doubleFace)
    def get_IsLAICalc(self): return self._IsLAICalc
    def set_IsLAICalc(self, value):
        self._IsLAICalc = value
        update_node(self,self.troot,'triangleFile')
    IsLAICalc = property(get_IsLAICalc, set_IsLAICalc)
    def get_LeafPF(self): return self._LeafPF
    def set_LeafPF(self, value):
        self._LeafPF = value
        update_node(self,self.troot,'triangleFile')
    LeafPF = property(get_LeafPF, set_LeafPF)
    def get_ALASegmentation(self): return self._ALASegmentation
    def set_ALASegmentation(self, value):
        self._ALASegmentation = value
        update_node(self,self.troot,'triangleFile')
    ALASegmentation = property(get_ALASegmentation, set_ALASegmentation)
    def get_forcedLAI(self): return self._forcedLAI
    def set_forcedLAI(self, value):
        self._forcedLAI = value
        update_node(self,self.troot,'triangleFile')
    forcedLAI = property(get_forcedLAI, set_forcedLAI)
    def get_forcedLAI_Surface_Value(self): return self._forcedLAI_Surface_Value
    def set_forcedLAI_Surface_Value(self, value):
        self._forcedLAI_Surface_Value = value
        update_node(self,self.troot,'triangleFile')
    forcedLAI_Surface_Value = property(get_forcedLAI_Surface_Value, set_forcedLAI_Surface_Value)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.OpticalPropertyLink is not None or
            self.BackFaceOpticalPropertyLink is not None or
            self.ThermalPropertyLink is not None or
            self.BackFaceThermalPropertyLink is not None or
            self.TRIFileReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_TriangleList', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_TriangleList')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_TriangleList')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_TriangleList', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_TriangleList'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type="%s"' % self.gds_format_integer(self.type_, input_name='type'))
        if self.nbTriangles is not None and 'nbTriangles' not in already_processed:
            already_processed.add('nbTriangles')
            outfile.write(' nbTriangles="%s"' % self.gds_format_integer(self.nbTriangles, input_name='nbTriangles'))
        if self.modeDSM is not None and 'modeDSM' not in already_processed:
            already_processed.add('modeDSM')
            outfile.write(' modeDSM="%s"' % self.gds_format_integer(self.modeDSM, input_name='modeDSM'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.doubleFace is not None and 'doubleFace' not in already_processed:
            already_processed.add('doubleFace')
            outfile.write(' doubleFace="%s"' % self.gds_format_integer(self.doubleFace, input_name='doubleFace'))
        if self.IsLAICalc is not None and 'IsLAICalc' not in already_processed:
            already_processed.add('IsLAICalc')
            outfile.write(' IsLAICalc="%s"' % self.gds_format_integer(self.IsLAICalc, input_name='IsLAICalc'))
        if self.LeafPF is not None and 'LeafPF' not in already_processed:
            already_processed.add('LeafPF')
            outfile.write(' LeafPF="%s"' % self.gds_format_integer(self.LeafPF, input_name='LeafPF'))
        if self.ALASegmentation is not None and 'ALASegmentation' not in already_processed:
            already_processed.add('ALASegmentation')
            outfile.write(' ALASegmentation="%s"' % self.gds_format_integer(self.ALASegmentation, input_name='ALASegmentation'))
        if self.forcedLAI is not None and 'forcedLAI' not in already_processed:
            already_processed.add('forcedLAI')
            outfile.write(' forcedLAI="%s"' % self.gds_format_integer(self.forcedLAI, input_name='forcedLAI'))
        if self.forcedLAI_Surface_Value is not None and 'forcedLAI_Surface_Value' not in already_processed:
            already_processed.add('forcedLAI_Surface_Value')
            outfile.write(' forcedLAI_Surface_Value="%s"' % self.gds_format_double(self.forcedLAI_Surface_Value, input_name='forcedLAI_Surface_Value'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_TriangleList', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OpticalPropertyLink is not None:
            self.OpticalPropertyLink.export(outfile, level, namespaceprefix_, name_='OpticalPropertyLink', pretty_print=pretty_print)
        if self.BackFaceOpticalPropertyLink is not None:
            self.BackFaceOpticalPropertyLink.export(outfile, level, namespaceprefix_, name_='BackFaceOpticalPropertyLink', pretty_print=pretty_print)
        if self.ThermalPropertyLink is not None:
            self.ThermalPropertyLink.export(outfile, level, namespaceprefix_, name_='ThermalPropertyLink', pretty_print=pretty_print)
        if self.BackFaceThermalPropertyLink is not None:
            self.BackFaceThermalPropertyLink.export(outfile, level, namespaceprefix_, name_='BackFaceThermalPropertyLink', pretty_print=pretty_print)
        if self.TRIFileReference is not None:
            self.TRIFileReference.export(outfile, level, namespaceprefix_, name_='TRIFileReference', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_TriangleList', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.type_ is not None:
            element.set('type', self.gds_format_integer(self.type_))
        if self.nbTriangles is not None:
            element.set('nbTriangles', self.gds_format_integer(self.nbTriangles))
        if self.modeDSM is not None:
            element.set('modeDSM', self.gds_format_integer(self.modeDSM))
        if self.name is not None:
            element.set('name', self.gds_format_string(self.name))
        if self.doubleFace is not None:
            element.set('doubleFace', self.gds_format_integer(self.doubleFace))
        if self.IsLAICalc is not None:
            element.set('IsLAICalc', self.gds_format_integer(self.IsLAICalc))
        if self.LeafPF is not None:
            element.set('LeafPF', self.gds_format_integer(self.LeafPF))
        if self.ALASegmentation is not None:
            element.set('ALASegmentation', self.gds_format_integer(self.ALASegmentation))
        if self.forcedLAI is not None:
            element.set('forcedLAI', self.gds_format_integer(self.forcedLAI))
        if self.forcedLAI_Surface_Value is not None:
            element.set('forcedLAI_Surface_Value', self.gds_format_double(self.forcedLAI_Surface_Value))
        if self.OpticalPropertyLink is not None:
            OpticalPropertyLink_ = self.OpticalPropertyLink
            OpticalPropertyLink_.to_etree(element, name_='OpticalPropertyLink', mapping_=mapping_)
        if self.BackFaceOpticalPropertyLink is not None:
            BackFaceOpticalPropertyLink_ = self.BackFaceOpticalPropertyLink
            BackFaceOpticalPropertyLink_.to_etree(element, name_='BackFaceOpticalPropertyLink', mapping_=mapping_)
        if self.ThermalPropertyLink is not None:
            ThermalPropertyLink_ = self.ThermalPropertyLink
            ThermalPropertyLink_.to_etree(element, name_='ThermalPropertyLink', mapping_=mapping_)
        if self.BackFaceThermalPropertyLink is not None:
            BackFaceThermalPropertyLink_ = self.BackFaceThermalPropertyLink
            BackFaceThermalPropertyLink_.to_etree(element, name_='BackFaceThermalPropertyLink', mapping_=mapping_)
        if self.TRIFileReference is not None:
            TRIFileReference_ = self.TRIFileReference
            TRIFileReference_.to_etree(element, name_='TRIFileReference', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_TriangleList'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_=%d,\n' % (self.type_,))
        if self.nbTriangles is not None and 'nbTriangles' not in already_processed:
            already_processed.add('nbTriangles')
            showIndent(outfile, level)
            outfile.write('nbTriangles=%d,\n' % (self.nbTriangles,))
        if self.modeDSM is not None and 'modeDSM' not in already_processed:
            already_processed.add('modeDSM')
            showIndent(outfile, level)
            outfile.write('modeDSM=%d,\n' % (self.modeDSM,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.doubleFace is not None and 'doubleFace' not in already_processed:
            already_processed.add('doubleFace')
            showIndent(outfile, level)
            outfile.write('doubleFace=%d,\n' % (self.doubleFace,))
        if self.IsLAICalc is not None and 'IsLAICalc' not in already_processed:
            already_processed.add('IsLAICalc')
            showIndent(outfile, level)
            outfile.write('IsLAICalc=%d,\n' % (self.IsLAICalc,))
        if self.LeafPF is not None and 'LeafPF' not in already_processed:
            already_processed.add('LeafPF')
            showIndent(outfile, level)
            outfile.write('LeafPF=%d,\n' % (self.LeafPF,))
        if self.ALASegmentation is not None and 'ALASegmentation' not in already_processed:
            already_processed.add('ALASegmentation')
            showIndent(outfile, level)
            outfile.write('ALASegmentation=%d,\n' % (self.ALASegmentation,))
        if self.forcedLAI is not None and 'forcedLAI' not in already_processed:
            already_processed.add('forcedLAI')
            showIndent(outfile, level)
            outfile.write('forcedLAI=%d,\n' % (self.forcedLAI,))
        if self.forcedLAI_Surface_Value is not None and 'forcedLAI_Surface_Value' not in already_processed:
            already_processed.add('forcedLAI_Surface_Value')
            showIndent(outfile, level)
            outfile.write('forcedLAI_Surface_Value=%e,\n' % (self.forcedLAI_Surface_Value,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.OpticalPropertyLink is not None:
            showIndent(outfile, level)
            outfile.write('OpticalPropertyLink=model_._OpticalPropertyLink(\n')
            self.OpticalPropertyLink.exportLiteral(outfile, level, name_='OpticalPropertyLink')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BackFaceOpticalPropertyLink is not None:
            showIndent(outfile, level)
            outfile.write('BackFaceOpticalPropertyLink=model_._BackFaceOpticalPropertyLink(\n')
            self.BackFaceOpticalPropertyLink.exportLiteral(outfile, level, name_='BackFaceOpticalPropertyLink')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ThermalPropertyLink is not None:
            showIndent(outfile, level)
            outfile.write('ThermalPropertyLink=model_._ThermalPropertyLink(\n')
            self.ThermalPropertyLink.exportLiteral(outfile, level, name_='ThermalPropertyLink')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BackFaceThermalPropertyLink is not None:
            showIndent(outfile, level)
            outfile.write('BackFaceThermalPropertyLink=model_._BackFaceThermalPropertyLink(\n')
            self.BackFaceThermalPropertyLink.exportLiteral(outfile, level, name_='BackFaceThermalPropertyLink')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TRIFileReference is not None:
            showIndent(outfile, level)
            outfile.write('TRIFileReference=model_._TRIFileReference(\n')
            self.TRIFileReference.exportLiteral(outfile, level, name_='TRIFileReference')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            try:
                self.type_ = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('nbTriangles', node)
        if value is not None and 'nbTriangles' not in already_processed:
            already_processed.add('nbTriangles')
            try:
                self.nbTriangles = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('modeDSM', node)
        if value is not None and 'modeDSM' not in already_processed:
            already_processed.add('modeDSM')
            try:
                self.modeDSM = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('doubleFace', node)
        if value is not None and 'doubleFace' not in already_processed:
            already_processed.add('doubleFace')
            try:
                self.doubleFace = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('IsLAICalc', node)
        if value is not None and 'IsLAICalc' not in already_processed:
            already_processed.add('IsLAICalc')
            try:
                self.IsLAICalc = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('LeafPF', node)
        if value is not None and 'LeafPF' not in already_processed:
            already_processed.add('LeafPF')
            try:
                self.LeafPF = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('ALASegmentation', node)
        if value is not None and 'ALASegmentation' not in already_processed:
            already_processed.add('ALASegmentation')
            try:
                self.ALASegmentation = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('forcedLAI', node)
        if value is not None and 'forcedLAI' not in already_processed:
            already_processed.add('forcedLAI')
            try:
                self.forcedLAI = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('forcedLAI_Surface_Value', node)
        if value is not None and 'forcedLAI_Surface_Value' not in already_processed:
            already_processed.add('forcedLAI_Surface_Value')
            try:
                self.forcedLAI_Surface_Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (forcedLAI_Surface_Value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OpticalPropertyLink':
            obj_ = create_OpticalPropertyLink.factory()
            obj_.build(child_)
            self.set_OpticalPropertyLink(obj_)
            obj_.original_tagname_ = 'OpticalPropertyLink'
        elif nodeName_ == 'BackFaceOpticalPropertyLink':
            obj_ = create_BackFaceOpticalPropertyLink.factory()
            obj_.build(child_)
            self.set_BackFaceOpticalPropertyLink(obj_)
            obj_.original_tagname_ = 'BackFaceOpticalPropertyLink'
        elif nodeName_ == 'ThermalPropertyLink':
            obj_ = create_ThermalPropertyLink.factory()
            obj_.build(child_)
            self.set_ThermalPropertyLink(obj_)
            obj_.original_tagname_ = 'ThermalPropertyLink'
        elif nodeName_ == 'BackFaceThermalPropertyLink':
            obj_ = create_BackFaceThermalPropertyLink.factory()
            obj_.build(child_)
            self.set_BackFaceThermalPropertyLink(obj_)
            obj_.original_tagname_ = 'BackFaceThermalPropertyLink'
        elif nodeName_ == 'TRIFileReference':
            obj_ = create_TRIFileReference.factory()
            obj_.build(child_)
            self.set_TRIFileReference(obj_)
            obj_.original_tagname_ = 'TRIFileReference'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_TriangleList


class create_OpticalPropertyLink(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('type_', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('indexFctPhase', 'xsd:int', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, type_=None, indexFctPhase=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_OpticalPropertyLink')
        self.attrib = ['type_', 'indexFctPhase']
        self.children = []
        self.parent = None
        self._type_ = _cast(int, type_)
        self._indexFctPhase = _cast(int, indexFctPhase)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_OpticalPropertyLink)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_OpticalPropertyLink.subclass:
            return create_OpticalPropertyLink.subclass(*args_, **kwargs_)
        else:
            return create_OpticalPropertyLink(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self._type_
    def set_type(self, value):
        self._type_ = value
        update_node(self,self.troot,'triangleFile')
    type_ = property(get_type, set_type)
    def get_indexFctPhase(self): return self._indexFctPhase
    def set_indexFctPhase(self, value):
        self._indexFctPhase = value
        update_node(self,self.troot,'triangleFile')
    indexFctPhase = property(get_indexFctPhase, set_indexFctPhase)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_OpticalPropertyLink', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_OpticalPropertyLink')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_OpticalPropertyLink')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_OpticalPropertyLink', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_OpticalPropertyLink'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type="%s"' % self.gds_format_integer(self.type_, input_name='type'))
        if self.indexFctPhase is not None and 'indexFctPhase' not in already_processed:
            already_processed.add('indexFctPhase')
            outfile.write(' indexFctPhase="%s"' % self.gds_format_integer(self.indexFctPhase, input_name='indexFctPhase'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_OpticalPropertyLink', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_OpticalPropertyLink', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.type_ is not None:
            element.set('type', self.gds_format_integer(self.type_))
        if self.indexFctPhase is not None:
            element.set('indexFctPhase', self.gds_format_integer(self.indexFctPhase))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_OpticalPropertyLink'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_=%d,\n' % (self.type_,))
        if self.indexFctPhase is not None and 'indexFctPhase' not in already_processed:
            already_processed.add('indexFctPhase')
            showIndent(outfile, level)
            outfile.write('indexFctPhase=%d,\n' % (self.indexFctPhase,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            try:
                self.type_ = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('indexFctPhase', node)
        if value is not None and 'indexFctPhase' not in already_processed:
            already_processed.add('indexFctPhase')
            try:
                self.indexFctPhase = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_OpticalPropertyLink


class create_BackFaceOpticalPropertyLink(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('type_', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('indexFctPhase', 'xsd:int', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, type_=None, indexFctPhase=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_BackFaceOpticalPropertyLink')
        self.attrib = ['type_', 'indexFctPhase']
        self.children = []
        self.parent = None
        self._type_ = _cast(int, type_)
        self._indexFctPhase = _cast(int, indexFctPhase)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_BackFaceOpticalPropertyLink)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_BackFaceOpticalPropertyLink.subclass:
            return create_BackFaceOpticalPropertyLink.subclass(*args_, **kwargs_)
        else:
            return create_BackFaceOpticalPropertyLink(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self._type_
    def set_type(self, value):
        self._type_ = value
        update_node(self,self.troot,'triangleFile')
    type_ = property(get_type, set_type)
    def get_indexFctPhase(self): return self._indexFctPhase
    def set_indexFctPhase(self, value):
        self._indexFctPhase = value
        update_node(self,self.troot,'triangleFile')
    indexFctPhase = property(get_indexFctPhase, set_indexFctPhase)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_BackFaceOpticalPropertyLink', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_BackFaceOpticalPropertyLink')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_BackFaceOpticalPropertyLink')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_BackFaceOpticalPropertyLink', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_BackFaceOpticalPropertyLink'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type="%s"' % self.gds_format_integer(self.type_, input_name='type'))
        if self.indexFctPhase is not None and 'indexFctPhase' not in already_processed:
            already_processed.add('indexFctPhase')
            outfile.write(' indexFctPhase="%s"' % self.gds_format_integer(self.indexFctPhase, input_name='indexFctPhase'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_BackFaceOpticalPropertyLink', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_BackFaceOpticalPropertyLink', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.type_ is not None:
            element.set('type', self.gds_format_integer(self.type_))
        if self.indexFctPhase is not None:
            element.set('indexFctPhase', self.gds_format_integer(self.indexFctPhase))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_BackFaceOpticalPropertyLink'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_=%d,\n' % (self.type_,))
        if self.indexFctPhase is not None and 'indexFctPhase' not in already_processed:
            already_processed.add('indexFctPhase')
            showIndent(outfile, level)
            outfile.write('indexFctPhase=%d,\n' % (self.indexFctPhase,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            try:
                self.type_ = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('indexFctPhase', node)
        if value is not None and 'indexFctPhase' not in already_processed:
            already_processed.add('indexFctPhase')
            try:
                self.indexFctPhase = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_BackFaceOpticalPropertyLink


class create_ThermalPropertyLink(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('indexIntervalle', 'xsd:int', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, indexIntervalle=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_ThermalPropertyLink')
        self.attrib = ['indexIntervalle']
        self.children = []
        self.parent = None
        self._indexIntervalle = _cast(int, indexIntervalle)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_ThermalPropertyLink)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_ThermalPropertyLink.subclass:
            return create_ThermalPropertyLink.subclass(*args_, **kwargs_)
        else:
            return create_ThermalPropertyLink(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_indexIntervalle(self): return self._indexIntervalle
    def set_indexIntervalle(self, value):
        self._indexIntervalle = value
        update_node(self,self.troot,'triangleFile')
    indexIntervalle = property(get_indexIntervalle, set_indexIntervalle)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_ThermalPropertyLink', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_ThermalPropertyLink')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_ThermalPropertyLink')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_ThermalPropertyLink', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_ThermalPropertyLink'):
        if self.indexIntervalle is not None and 'indexIntervalle' not in already_processed:
            already_processed.add('indexIntervalle')
            outfile.write(' indexIntervalle="%s"' % self.gds_format_integer(self.indexIntervalle, input_name='indexIntervalle'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_ThermalPropertyLink', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_ThermalPropertyLink', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.indexIntervalle is not None:
            element.set('indexIntervalle', self.gds_format_integer(self.indexIntervalle))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_ThermalPropertyLink'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.indexIntervalle is not None and 'indexIntervalle' not in already_processed:
            already_processed.add('indexIntervalle')
            showIndent(outfile, level)
            outfile.write('indexIntervalle=%d,\n' % (self.indexIntervalle,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('indexIntervalle', node)
        if value is not None and 'indexIntervalle' not in already_processed:
            already_processed.add('indexIntervalle')
            try:
                self.indexIntervalle = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_ThermalPropertyLink


class create_BackFaceThermalPropertyLink(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('indexIntervalle', 'xsd:int', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, indexIntervalle=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_BackFaceThermalPropertyLink')
        self.attrib = ['indexIntervalle']
        self.children = []
        self.parent = None
        self._indexIntervalle = _cast(int, indexIntervalle)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_BackFaceThermalPropertyLink)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_BackFaceThermalPropertyLink.subclass:
            return create_BackFaceThermalPropertyLink.subclass(*args_, **kwargs_)
        else:
            return create_BackFaceThermalPropertyLink(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_indexIntervalle(self): return self._indexIntervalle
    def set_indexIntervalle(self, value):
        self._indexIntervalle = value
        update_node(self,self.troot,'triangleFile')
    indexIntervalle = property(get_indexIntervalle, set_indexIntervalle)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_BackFaceThermalPropertyLink', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_BackFaceThermalPropertyLink')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_BackFaceThermalPropertyLink')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_BackFaceThermalPropertyLink', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_BackFaceThermalPropertyLink'):
        if self.indexIntervalle is not None and 'indexIntervalle' not in already_processed:
            already_processed.add('indexIntervalle')
            outfile.write(' indexIntervalle="%s"' % self.gds_format_integer(self.indexIntervalle, input_name='indexIntervalle'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_BackFaceThermalPropertyLink', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_BackFaceThermalPropertyLink', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.indexIntervalle is not None:
            element.set('indexIntervalle', self.gds_format_integer(self.indexIntervalle))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_BackFaceThermalPropertyLink'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.indexIntervalle is not None and 'indexIntervalle' not in already_processed:
            already_processed.add('indexIntervalle')
            showIndent(outfile, level)
            outfile.write('indexIntervalle=%d,\n' % (self.indexIntervalle,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('indexIntervalle', node)
        if value is not None and 'indexIntervalle' not in already_processed:
            already_processed.add('indexIntervalle')
            try:
                self.indexIntervalle = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_BackFaceThermalPropertyLink


class create_TRIFileReference(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('fileName', 'xsd:string', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, fileName=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('triangleFile','_TRIFileReference')
        self.attrib = ['fileName']
        self.children = []
        self.parent = None
        self._fileName = _cast(None, fileName)
        update_node(self,self.troot,'triangleFile')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_TRIFileReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_TRIFileReference.subclass:
            return create_TRIFileReference.subclass(*args_, **kwargs_)
        else:
            return create_TRIFileReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fileName(self): return self._fileName
    def set_fileName(self, value):
        self._fileName = value
        update_node(self,self.troot,'triangleFile')
    fileName = property(get_fileName, set_fileName)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_TRIFileReference', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_TRIFileReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_TRIFileReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_TRIFileReference', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_TRIFileReference'):
        if self.fileName is not None and 'fileName' not in already_processed:
            already_processed.add('fileName')
            outfile.write(' fileName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.fileName), input_name='fileName')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_TRIFileReference', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_TRIFileReference', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.fileName is not None:
            element.set('fileName', self.gds_format_string(self.fileName))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_TRIFileReference'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.fileName is not None and 'fileName' not in already_processed:
            already_processed.add('fileName')
            showIndent(outfile, level)
            outfile.write('fileName="%s",\n' % (self.fileName,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('fileName', node)
        if value is not None and 'fileName' not in already_processed:
            already_processed.add('fileName')
            self.fileName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_TRIFileReference


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <createParser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from triangleFile import *\n\n')
        sys.stdout.write('import triangleFile as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "createDartFile",
    "create_BackFaceOpticalPropertyLink",
    "create_BackFaceThermalPropertyLink",
    "create_BoundingBox",
    "create_LowerCorner",
    "create_Object",
    "create_OpticalPropertyLink",
    "create_TRIFileReference",
    "create_ThermalPropertyLink",
    "create_Transformation",
    "create_TriangleFile",
    "create_TriangleList",
    "create_UpperCorner"
]
