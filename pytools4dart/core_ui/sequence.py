#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Nov 19 15:08:16 2019 by generateDS.py version 2.29.25.
# Python 3.6.7 | packaged by conda-forge | (default, Nov  6 2019, 16:19:42)  [GCC 7.3.0]
#
# Command line options:
#   ('-m', '')
#   ('-f', '')
#   ('--always-export-default', '')
#   ('--export', 'write literal etree')
#   ('-u', 'core_ui.user_methods')
#   ('-p', 'create')
#   ('--post-attrib-setter', "update_node(self,self.troot,'sequence')")
#   ('--pre-ctor', "self.troot=get_gs_troot('sequence','{classname}')")
#   ('--post-ctor', "update_node(self,self.troot,'sequence')")
#   ('--imports', 'from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes')
#   ('-o', '/media/DATA/Florian/git/pytools4dart/pytools4dart/core_ui/sequence.py')
#
# Command line arguments:
#   /media/DATA/Florian/git/pytools4dart/pytools4dart/xsdschemas/sequence.xsd
#
# Command line:
#   /home/boissieu/anaconda3/envs/pytools4dart/bin/generateDS.py -m -f --always-export-default --export="write literal etree" -u "core_ui.user_methods" -p "create" --post-attrib-setter="update_node(self,self.troot,'sequence')" --pre-ctor="self.troot=get_gs_troot('sequence','{classname}')" --post-ctor="update_node(self,self.troot,'sequence')" --imports="from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes" -o "/media/DATA/Florian/git/pytools4dart/pytools4dart/core_ui/sequence.py" /media/DATA/Florian/git/pytools4dart/pytools4dart/xsdschemas/sequence.xsd
#
# Current working directory (os.getcwd()):
#   pytools4dart
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_
from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#

def checkclass(value, cl):
    if isinstance(value, list):
        for v in value:
            if not isinstance(v, cl):
                raise ValueError("invalid class")
    else:
        if not isinstance(value, cl):
            raise ValueError("invalid class")

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class create_DartSequencerDescriptorEntry(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('args', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('propertyName', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('type_', 'xs:string', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, args=None, propertyName=None, type_=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','_DartSequencerDescriptorEntry')
        self.attrib = ['args', 'propertyName', 'type_']
        self.children = []
        self.parent = None
        self._args = _cast(None, args)
        self._propertyName = _cast(None, propertyName)
        self._type_ = _cast(None, type_)
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartSequencerDescriptorEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartSequencerDescriptorEntry.subclass:
            return create_DartSequencerDescriptorEntry.subclass(*args_, **kwargs_)
        else:
            return create_DartSequencerDescriptorEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_args(self): return self._args
    def set_args(self, value):
        self._args = value
        update_node(self,self.troot,'sequence')
    args = property(get_args, set_args)
    def get_propertyName(self): return self._propertyName
    def set_propertyName(self, value):
        self._propertyName = value
        update_node(self,self.troot,'sequence')
    propertyName = property(get_propertyName, set_propertyName)
    def get_type(self): return self._type_
    def set_type(self, value):
        self._type_ = value
        update_node(self,self.troot,'sequence')
    type_ = property(get_type, set_type)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptorEntry', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartSequencerDescriptorEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartSequencerDescriptorEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartSequencerDescriptorEntry', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartSequencerDescriptorEntry'):
        if self.args is not None and 'args' not in already_processed:
            already_processed.add('args')
            outfile.write(' args=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.args), input_name='args')), ))
        if self.propertyName is not None and 'propertyName' not in already_processed:
            already_processed.add('propertyName')
            outfile.write(' propertyName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.propertyName), input_name='propertyName')), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.type_), input_name='type')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptorEntry', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_DartSequencerDescriptorEntry', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.args is not None:
            element.set('args', self.gds_format_string(self.args))
        if self.propertyName is not None:
            element.set('propertyName', self.gds_format_string(self.propertyName))
        if self.type_ is not None:
            element.set('type', self.gds_format_string(self.type_))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartSequencerDescriptorEntry'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.args is not None and 'args' not in already_processed:
            already_processed.add('args')
            showIndent(outfile, level)
            outfile.write('args="%s",\n' % (self.args,))
        if self.propertyName is not None and 'propertyName' not in already_processed:
            already_processed.add('propertyName')
            showIndent(outfile, level)
            outfile.write('propertyName="%s",\n' % (self.propertyName,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_="%s",\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('args', node)
        if value is not None and 'args' not in already_processed:
            already_processed.add('args')
            self.args = value
        value = find_attr_value_('propertyName', node)
        if value is not None and 'propertyName' not in already_processed:
            already_processed.add('propertyName')
            self.propertyName = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartSequencerDescriptorEntry


class create_DartSequencerDescriptorGroup(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('groupName', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('DartSequencerDescriptorEntry', '_DartSequencerDescriptorEntry', 1, 1, {'type': '_DartSequencerDescriptorEntry', 'name': 'DartSequencerDescriptorEntry', 'maxOccurs': 'unbounded', 'minOccurs': '0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, groupName='group', DartSequencerDescriptorEntry=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','_DartSequencerDescriptorGroup')
        self.attrib = ['groupName']
        self.children = ['DartSequencerDescriptorEntry']
        self.parent = None
        self._groupName = _cast(None, groupName)
        if DartSequencerDescriptorEntry is None:
            self._DartSequencerDescriptorEntry = []
        else:
            self._DartSequencerDescriptorEntry = DartSequencerDescriptorEntry
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartSequencerDescriptorGroup)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartSequencerDescriptorGroup.subclass:
            return create_DartSequencerDescriptorGroup.subclass(*args_, **kwargs_)
        else:
            return create_DartSequencerDescriptorGroup(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DartSequencerDescriptorEntry(self): return self._DartSequencerDescriptorEntry
    def set_DartSequencerDescriptorEntry(self, value):
        if value is not None:
            checkclass(value, create_DartSequencerDescriptorEntry)
            for v in value:
                v.parent = self
        self._DartSequencerDescriptorEntry = value
    def add_DartSequencerDescriptorEntry(self, value):
        value.parent = self
        self._DartSequencerDescriptorEntry.append(value)
    def insert_DartSequencerDescriptorEntry_at(self, index, value):
        value.parent = self
        self.DartSequencerDescriptorEntry.insert(index, value)
    def replace_DartSequencerDescriptorEntry_at(self, index, value):
        value.parent = self
        self.DartSequencerDescriptorEntry[index] = value
    DartSequencerDescriptorEntry = property(get_DartSequencerDescriptorEntry, set_DartSequencerDescriptorEntry)
    def get_groupName(self): return self._groupName
    def set_groupName(self, value):
        self._groupName = value
        update_node(self,self.troot,'sequence')
    groupName = property(get_groupName, set_groupName)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.DartSequencerDescriptorEntry
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptorGroup', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartSequencerDescriptorGroup')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartSequencerDescriptorGroup')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartSequencerDescriptorGroup', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartSequencerDescriptorGroup'):
        if self.groupName is not None and 'groupName' not in already_processed:
            already_processed.add('groupName')
            outfile.write(' groupName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.groupName), input_name='groupName')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptorGroup', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DartSequencerDescriptorEntry_ in self.DartSequencerDescriptorEntry:
            DartSequencerDescriptorEntry_.export(outfile, level, namespaceprefix_, name_='DartSequencerDescriptorEntry', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_DartSequencerDescriptorGroup', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.groupName is not None:
            element.set('groupName', self.gds_format_string(self.groupName))
        for DartSequencerDescriptorEntry_ in self.DartSequencerDescriptorEntry:
            DartSequencerDescriptorEntry_.to_etree(element, name_='DartSequencerDescriptorEntry', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartSequencerDescriptorGroup'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.groupName is not None and 'groupName' not in already_processed:
            already_processed.add('groupName')
            showIndent(outfile, level)
            outfile.write('groupName="%s",\n' % (self.groupName,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('DartSequencerDescriptorEntry=[\n')
        level += 1
        for DartSequencerDescriptorEntry_ in self.DartSequencerDescriptorEntry:
            showIndent(outfile, level)
            outfile.write('model_._DartSequencerDescriptorEntry(\n')
            DartSequencerDescriptorEntry_.exportLiteral(outfile, level, name_='_DartSequencerDescriptorEntry')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.DartSequencerDescriptorEntry = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('groupName', node)
        if value is not None and 'groupName' not in already_processed:
            already_processed.add('groupName')
            self.groupName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DartSequencerDescriptorEntry':
            obj_ = create_DartSequencerDescriptorEntry.factory()
            obj_.build(child_)
            self.add_DartSequencerDescriptorEntry(obj_)
            obj_.original_tagname_ = 'DartSequencerDescriptorEntry'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartSequencerDescriptorGroup


class create_DartSequencerDescriptorEntries(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('DartSequencerDescriptorGroup', '_DartSequencerDescriptorGroup', 1, 1, {'type': '_DartSequencerDescriptorGroup', 'name': 'DartSequencerDescriptorGroup', 'maxOccurs': 'unbounded', 'minOccurs': '0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, DartSequencerDescriptorGroup=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','_DartSequencerDescriptorEntries')
        self.attrib = ['']
        self.children = ['DartSequencerDescriptorGroup']
        self.parent = None
        if DartSequencerDescriptorGroup is None:
            self._DartSequencerDescriptorGroup = []
        else:
            self._DartSequencerDescriptorGroup = DartSequencerDescriptorGroup
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartSequencerDescriptorEntries)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartSequencerDescriptorEntries.subclass:
            return create_DartSequencerDescriptorEntries.subclass(*args_, **kwargs_)
        else:
            return create_DartSequencerDescriptorEntries(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DartSequencerDescriptorGroup(self): return self._DartSequencerDescriptorGroup
    def set_DartSequencerDescriptorGroup(self, value):
        if value is not None:
            checkclass(value, create_DartSequencerDescriptorGroup)
            for v in value:
                v.parent = self
        self._DartSequencerDescriptorGroup = value
    def add_DartSequencerDescriptorGroup(self, value):
        value.parent = self
        self._DartSequencerDescriptorGroup.append(value)
    def insert_DartSequencerDescriptorGroup_at(self, index, value):
        value.parent = self
        self.DartSequencerDescriptorGroup.insert(index, value)
    def replace_DartSequencerDescriptorGroup_at(self, index, value):
        value.parent = self
        self.DartSequencerDescriptorGroup[index] = value
    DartSequencerDescriptorGroup = property(get_DartSequencerDescriptorGroup, set_DartSequencerDescriptorGroup)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.DartSequencerDescriptorGroup
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptorEntries', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartSequencerDescriptorEntries')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartSequencerDescriptorEntries')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartSequencerDescriptorEntries', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartSequencerDescriptorEntries'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptorEntries', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DartSequencerDescriptorGroup_ in self.DartSequencerDescriptorGroup:
            DartSequencerDescriptorGroup_.export(outfile, level, namespaceprefix_, name_='DartSequencerDescriptorGroup', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_DartSequencerDescriptorEntries', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for DartSequencerDescriptorGroup_ in self.DartSequencerDescriptorGroup:
            DartSequencerDescriptorGroup_.to_etree(element, name_='DartSequencerDescriptorGroup', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartSequencerDescriptorEntries'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('DartSequencerDescriptorGroup=[\n')
        level += 1
        for DartSequencerDescriptorGroup_ in self.DartSequencerDescriptorGroup:
            showIndent(outfile, level)
            outfile.write('model_._DartSequencerDescriptorGroup(\n')
            DartSequencerDescriptorGroup_.exportLiteral(outfile, level, name_='_DartSequencerDescriptorGroup')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.DartSequencerDescriptorGroup = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DartSequencerDescriptorGroup':
            obj_ = create_DartSequencerDescriptorGroup.factory()
            obj_.build(child_)
            self.add_DartSequencerDescriptorGroup(obj_)
            obj_.original_tagname_ = 'DartSequencerDescriptorGroup'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartSequencerDescriptorEntries


class create_DartSequencerPreferences(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('atmosphereMaketLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('dartLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteAll', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteAtmosphere', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteAtmosphereMaket', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteDartLut', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteDartSequenceur', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteDartTxt', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteDirection', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteInputs', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteLibPhase', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteMaket', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteMaketTreeResults', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteTreePosition', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('deleteTriangles', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('demGeneratorLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('directionLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('displayEnabled', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('genMode', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('hapkeLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('individualDisplayEnabled', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('maketLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('numberParallelThreads', 'xs:unsignedByte', 0, 1, {'use': 'optional'}),
        MemberSpec_('phaseLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('prospectLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('triangleFileProcessorLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('useBroadBand', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('useSceneSpectra', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('vegetationLaunched', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('zippedResults', 'xs:boolean', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, atmosphereMaketLaunched=True, dartLaunched=True, deleteAll=False, deleteAtmosphere=False, deleteAtmosphereMaket=True, deleteDartLut=True, deleteDartSequenceur=True, deleteDartTxt=True, deleteDirection=False, deleteInputs=False, deleteLibPhase=True, deleteMaket=True, deleteMaketTreeResults=True, deleteTreePosition=True, deleteTriangles=True, demGeneratorLaunched=True, directionLaunched=True, displayEnabled=True, genMode='XML', hapkeLaunched=True, individualDisplayEnabled=False, maketLaunched=True, numberParallelThreads=4, phaseLaunched=True, prospectLaunched=False, triangleFileProcessorLaunched=True, useBroadBand=True, useSceneSpectra=True, vegetationLaunched=True, zippedResults=False):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','_DartSequencerPreferences')
        self.attrib = ['atmosphereMaketLaunched', 'dartLaunched', 'deleteAll', 'deleteAtmosphere', 'deleteAtmosphereMaket', 'deleteDartLut', 'deleteDartSequenceur', 'deleteDartTxt', 'deleteDirection', 'deleteInputs', 'deleteLibPhase', 'deleteMaket', 'deleteMaketTreeResults', 'deleteTreePosition', 'deleteTriangles', 'demGeneratorLaunched', 'directionLaunched', 'displayEnabled', 'genMode', 'hapkeLaunched', 'individualDisplayEnabled', 'maketLaunched', 'numberParallelThreads', 'phaseLaunched', 'prospectLaunched', 'triangleFileProcessorLaunched', 'useBroadBand', 'useSceneSpectra', 'vegetationLaunched', 'zippedResults']
        self.children = []
        self.parent = None
        self._atmosphereMaketLaunched = _cast(bool, atmosphereMaketLaunched)
        self._dartLaunched = _cast(bool, dartLaunched)
        self._deleteAll = _cast(bool, deleteAll)
        self._deleteAtmosphere = _cast(bool, deleteAtmosphere)
        self._deleteAtmosphereMaket = _cast(bool, deleteAtmosphereMaket)
        self._deleteDartLut = _cast(bool, deleteDartLut)
        self._deleteDartSequenceur = _cast(bool, deleteDartSequenceur)
        self._deleteDartTxt = _cast(bool, deleteDartTxt)
        self._deleteDirection = _cast(bool, deleteDirection)
        self._deleteInputs = _cast(bool, deleteInputs)
        self._deleteLibPhase = _cast(bool, deleteLibPhase)
        self._deleteMaket = _cast(bool, deleteMaket)
        self._deleteMaketTreeResults = _cast(bool, deleteMaketTreeResults)
        self._deleteTreePosition = _cast(bool, deleteTreePosition)
        self._deleteTriangles = _cast(bool, deleteTriangles)
        self._demGeneratorLaunched = _cast(bool, demGeneratorLaunched)
        self._directionLaunched = _cast(bool, directionLaunched)
        self._displayEnabled = _cast(bool, displayEnabled)
        self._genMode = _cast(None, genMode)
        self._hapkeLaunched = _cast(bool, hapkeLaunched)
        self._individualDisplayEnabled = _cast(bool, individualDisplayEnabled)
        self._maketLaunched = _cast(bool, maketLaunched)
        self._numberParallelThreads = _cast(int, numberParallelThreads)
        self._phaseLaunched = _cast(bool, phaseLaunched)
        self._prospectLaunched = _cast(bool, prospectLaunched)
        self._triangleFileProcessorLaunched = _cast(bool, triangleFileProcessorLaunched)
        self._useBroadBand = _cast(bool, useBroadBand)
        self._useSceneSpectra = _cast(bool, useSceneSpectra)
        self._vegetationLaunched = _cast(bool, vegetationLaunched)
        self._zippedResults = _cast(bool, zippedResults)
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartSequencerPreferences)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartSequencerPreferences.subclass:
            return create_DartSequencerPreferences.subclass(*args_, **kwargs_)
        else:
            return create_DartSequencerPreferences(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_atmosphereMaketLaunched(self): return self._atmosphereMaketLaunched
    def set_atmosphereMaketLaunched(self, value):
        self._atmosphereMaketLaunched = value
        update_node(self,self.troot,'sequence')
    atmosphereMaketLaunched = property(get_atmosphereMaketLaunched, set_atmosphereMaketLaunched)
    def get_dartLaunched(self): return self._dartLaunched
    def set_dartLaunched(self, value):
        self._dartLaunched = value
        update_node(self,self.troot,'sequence')
    dartLaunched = property(get_dartLaunched, set_dartLaunched)
    def get_deleteAll(self): return self._deleteAll
    def set_deleteAll(self, value):
        self._deleteAll = value
        update_node(self,self.troot,'sequence')
    deleteAll = property(get_deleteAll, set_deleteAll)
    def get_deleteAtmosphere(self): return self._deleteAtmosphere
    def set_deleteAtmosphere(self, value):
        self._deleteAtmosphere = value
        update_node(self,self.troot,'sequence')
    deleteAtmosphere = property(get_deleteAtmosphere, set_deleteAtmosphere)
    def get_deleteAtmosphereMaket(self): return self._deleteAtmosphereMaket
    def set_deleteAtmosphereMaket(self, value):
        self._deleteAtmosphereMaket = value
        update_node(self,self.troot,'sequence')
    deleteAtmosphereMaket = property(get_deleteAtmosphereMaket, set_deleteAtmosphereMaket)
    def get_deleteDartLut(self): return self._deleteDartLut
    def set_deleteDartLut(self, value):
        self._deleteDartLut = value
        update_node(self,self.troot,'sequence')
    deleteDartLut = property(get_deleteDartLut, set_deleteDartLut)
    def get_deleteDartSequenceur(self): return self._deleteDartSequenceur
    def set_deleteDartSequenceur(self, value):
        self._deleteDartSequenceur = value
        update_node(self,self.troot,'sequence')
    deleteDartSequenceur = property(get_deleteDartSequenceur, set_deleteDartSequenceur)
    def get_deleteDartTxt(self): return self._deleteDartTxt
    def set_deleteDartTxt(self, value):
        self._deleteDartTxt = value
        update_node(self,self.troot,'sequence')
    deleteDartTxt = property(get_deleteDartTxt, set_deleteDartTxt)
    def get_deleteDirection(self): return self._deleteDirection
    def set_deleteDirection(self, value):
        self._deleteDirection = value
        update_node(self,self.troot,'sequence')
    deleteDirection = property(get_deleteDirection, set_deleteDirection)
    def get_deleteInputs(self): return self._deleteInputs
    def set_deleteInputs(self, value):
        self._deleteInputs = value
        update_node(self,self.troot,'sequence')
    deleteInputs = property(get_deleteInputs, set_deleteInputs)
    def get_deleteLibPhase(self): return self._deleteLibPhase
    def set_deleteLibPhase(self, value):
        self._deleteLibPhase = value
        update_node(self,self.troot,'sequence')
    deleteLibPhase = property(get_deleteLibPhase, set_deleteLibPhase)
    def get_deleteMaket(self): return self._deleteMaket
    def set_deleteMaket(self, value):
        self._deleteMaket = value
        update_node(self,self.troot,'sequence')
    deleteMaket = property(get_deleteMaket, set_deleteMaket)
    def get_deleteMaketTreeResults(self): return self._deleteMaketTreeResults
    def set_deleteMaketTreeResults(self, value):
        self._deleteMaketTreeResults = value
        update_node(self,self.troot,'sequence')
    deleteMaketTreeResults = property(get_deleteMaketTreeResults, set_deleteMaketTreeResults)
    def get_deleteTreePosition(self): return self._deleteTreePosition
    def set_deleteTreePosition(self, value):
        self._deleteTreePosition = value
        update_node(self,self.troot,'sequence')
    deleteTreePosition = property(get_deleteTreePosition, set_deleteTreePosition)
    def get_deleteTriangles(self): return self._deleteTriangles
    def set_deleteTriangles(self, value):
        self._deleteTriangles = value
        update_node(self,self.troot,'sequence')
    deleteTriangles = property(get_deleteTriangles, set_deleteTriangles)
    def get_demGeneratorLaunched(self): return self._demGeneratorLaunched
    def set_demGeneratorLaunched(self, value):
        self._demGeneratorLaunched = value
        update_node(self,self.troot,'sequence')
    demGeneratorLaunched = property(get_demGeneratorLaunched, set_demGeneratorLaunched)
    def get_directionLaunched(self): return self._directionLaunched
    def set_directionLaunched(self, value):
        self._directionLaunched = value
        update_node(self,self.troot,'sequence')
    directionLaunched = property(get_directionLaunched, set_directionLaunched)
    def get_displayEnabled(self): return self._displayEnabled
    def set_displayEnabled(self, value):
        self._displayEnabled = value
        update_node(self,self.troot,'sequence')
    displayEnabled = property(get_displayEnabled, set_displayEnabled)
    def get_genMode(self): return self._genMode
    def set_genMode(self, value):
        self._genMode = value
        update_node(self,self.troot,'sequence')
    genMode = property(get_genMode, set_genMode)
    def get_hapkeLaunched(self): return self._hapkeLaunched
    def set_hapkeLaunched(self, value):
        self._hapkeLaunched = value
        update_node(self,self.troot,'sequence')
    hapkeLaunched = property(get_hapkeLaunched, set_hapkeLaunched)
    def get_individualDisplayEnabled(self): return self._individualDisplayEnabled
    def set_individualDisplayEnabled(self, value):
        self._individualDisplayEnabled = value
        update_node(self,self.troot,'sequence')
    individualDisplayEnabled = property(get_individualDisplayEnabled, set_individualDisplayEnabled)
    def get_maketLaunched(self): return self._maketLaunched
    def set_maketLaunched(self, value):
        self._maketLaunched = value
        update_node(self,self.troot,'sequence')
    maketLaunched = property(get_maketLaunched, set_maketLaunched)
    def get_numberParallelThreads(self): return self._numberParallelThreads
    def set_numberParallelThreads(self, value):
        self._numberParallelThreads = value
        update_node(self,self.troot,'sequence')
    numberParallelThreads = property(get_numberParallelThreads, set_numberParallelThreads)
    def get_phaseLaunched(self): return self._phaseLaunched
    def set_phaseLaunched(self, value):
        self._phaseLaunched = value
        update_node(self,self.troot,'sequence')
    phaseLaunched = property(get_phaseLaunched, set_phaseLaunched)
    def get_prospectLaunched(self): return self._prospectLaunched
    def set_prospectLaunched(self, value):
        self._prospectLaunched = value
        update_node(self,self.troot,'sequence')
    prospectLaunched = property(get_prospectLaunched, set_prospectLaunched)
    def get_triangleFileProcessorLaunched(self): return self._triangleFileProcessorLaunched
    def set_triangleFileProcessorLaunched(self, value):
        self._triangleFileProcessorLaunched = value
        update_node(self,self.troot,'sequence')
    triangleFileProcessorLaunched = property(get_triangleFileProcessorLaunched, set_triangleFileProcessorLaunched)
    def get_useBroadBand(self): return self._useBroadBand
    def set_useBroadBand(self, value):
        self._useBroadBand = value
        update_node(self,self.troot,'sequence')
    useBroadBand = property(get_useBroadBand, set_useBroadBand)
    def get_useSceneSpectra(self): return self._useSceneSpectra
    def set_useSceneSpectra(self, value):
        self._useSceneSpectra = value
        update_node(self,self.troot,'sequence')
    useSceneSpectra = property(get_useSceneSpectra, set_useSceneSpectra)
    def get_vegetationLaunched(self): return self._vegetationLaunched
    def set_vegetationLaunched(self, value):
        self._vegetationLaunched = value
        update_node(self,self.troot,'sequence')
    vegetationLaunched = property(get_vegetationLaunched, set_vegetationLaunched)
    def get_zippedResults(self): return self._zippedResults
    def set_zippedResults(self, value):
        self._zippedResults = value
        update_node(self,self.troot,'sequence')
    zippedResults = property(get_zippedResults, set_zippedResults)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartSequencerPreferences', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartSequencerPreferences')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartSequencerPreferences')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartSequencerPreferences', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartSequencerPreferences'):
        if self.atmosphereMaketLaunched is not None and 'atmosphereMaketLaunched' not in already_processed:
            already_processed.add('atmosphereMaketLaunched')
            outfile.write(' atmosphereMaketLaunched="%s"' % self.gds_format_boolean(self.atmosphereMaketLaunched, input_name='atmosphereMaketLaunched'))
        if self.dartLaunched is not None and 'dartLaunched' not in already_processed:
            already_processed.add('dartLaunched')
            outfile.write(' dartLaunched="%s"' % self.gds_format_boolean(self.dartLaunched, input_name='dartLaunched'))
        if self.deleteAll is not None and 'deleteAll' not in already_processed:
            already_processed.add('deleteAll')
            outfile.write(' deleteAll="%s"' % self.gds_format_boolean(self.deleteAll, input_name='deleteAll'))
        if self.deleteAtmosphere is not None and 'deleteAtmosphere' not in already_processed:
            already_processed.add('deleteAtmosphere')
            outfile.write(' deleteAtmosphere="%s"' % self.gds_format_boolean(self.deleteAtmosphere, input_name='deleteAtmosphere'))
        if self.deleteAtmosphereMaket is not None and 'deleteAtmosphereMaket' not in already_processed:
            already_processed.add('deleteAtmosphereMaket')
            outfile.write(' deleteAtmosphereMaket="%s"' % self.gds_format_boolean(self.deleteAtmosphereMaket, input_name='deleteAtmosphereMaket'))
        if self.deleteDartLut is not None and 'deleteDartLut' not in already_processed:
            already_processed.add('deleteDartLut')
            outfile.write(' deleteDartLut="%s"' % self.gds_format_boolean(self.deleteDartLut, input_name='deleteDartLut'))
        if self.deleteDartSequenceur is not None and 'deleteDartSequenceur' not in already_processed:
            already_processed.add('deleteDartSequenceur')
            outfile.write(' deleteDartSequenceur="%s"' % self.gds_format_boolean(self.deleteDartSequenceur, input_name='deleteDartSequenceur'))
        if self.deleteDartTxt is not None and 'deleteDartTxt' not in already_processed:
            already_processed.add('deleteDartTxt')
            outfile.write(' deleteDartTxt="%s"' % self.gds_format_boolean(self.deleteDartTxt, input_name='deleteDartTxt'))
        if self.deleteDirection is not None and 'deleteDirection' not in already_processed:
            already_processed.add('deleteDirection')
            outfile.write(' deleteDirection="%s"' % self.gds_format_boolean(self.deleteDirection, input_name='deleteDirection'))
        if self.deleteInputs is not None and 'deleteInputs' not in already_processed:
            already_processed.add('deleteInputs')
            outfile.write(' deleteInputs="%s"' % self.gds_format_boolean(self.deleteInputs, input_name='deleteInputs'))
        if self.deleteLibPhase is not None and 'deleteLibPhase' not in already_processed:
            already_processed.add('deleteLibPhase')
            outfile.write(' deleteLibPhase="%s"' % self.gds_format_boolean(self.deleteLibPhase, input_name='deleteLibPhase'))
        if self.deleteMaket is not None and 'deleteMaket' not in already_processed:
            already_processed.add('deleteMaket')
            outfile.write(' deleteMaket="%s"' % self.gds_format_boolean(self.deleteMaket, input_name='deleteMaket'))
        if self.deleteMaketTreeResults is not None and 'deleteMaketTreeResults' not in already_processed:
            already_processed.add('deleteMaketTreeResults')
            outfile.write(' deleteMaketTreeResults="%s"' % self.gds_format_boolean(self.deleteMaketTreeResults, input_name='deleteMaketTreeResults'))
        if self.deleteTreePosition is not None and 'deleteTreePosition' not in already_processed:
            already_processed.add('deleteTreePosition')
            outfile.write(' deleteTreePosition="%s"' % self.gds_format_boolean(self.deleteTreePosition, input_name='deleteTreePosition'))
        if self.deleteTriangles is not None and 'deleteTriangles' not in already_processed:
            already_processed.add('deleteTriangles')
            outfile.write(' deleteTriangles="%s"' % self.gds_format_boolean(self.deleteTriangles, input_name='deleteTriangles'))
        if self.demGeneratorLaunched is not None and 'demGeneratorLaunched' not in already_processed:
            already_processed.add('demGeneratorLaunched')
            outfile.write(' demGeneratorLaunched="%s"' % self.gds_format_boolean(self.demGeneratorLaunched, input_name='demGeneratorLaunched'))
        if self.directionLaunched is not None and 'directionLaunched' not in already_processed:
            already_processed.add('directionLaunched')
            outfile.write(' directionLaunched="%s"' % self.gds_format_boolean(self.directionLaunched, input_name='directionLaunched'))
        if self.displayEnabled is not None and 'displayEnabled' not in already_processed:
            already_processed.add('displayEnabled')
            outfile.write(' displayEnabled="%s"' % self.gds_format_boolean(self.displayEnabled, input_name='displayEnabled'))
        if self.genMode is not None and 'genMode' not in already_processed:
            already_processed.add('genMode')
            outfile.write(' genMode=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.genMode), input_name='genMode')), ))
        if self.hapkeLaunched is not None and 'hapkeLaunched' not in already_processed:
            already_processed.add('hapkeLaunched')
            outfile.write(' hapkeLaunched="%s"' % self.gds_format_boolean(self.hapkeLaunched, input_name='hapkeLaunched'))
        if self.individualDisplayEnabled is not None and 'individualDisplayEnabled' not in already_processed:
            already_processed.add('individualDisplayEnabled')
            outfile.write(' individualDisplayEnabled="%s"' % self.gds_format_boolean(self.individualDisplayEnabled, input_name='individualDisplayEnabled'))
        if self.maketLaunched is not None and 'maketLaunched' not in already_processed:
            already_processed.add('maketLaunched')
            outfile.write(' maketLaunched="%s"' % self.gds_format_boolean(self.maketLaunched, input_name='maketLaunched'))
        if self.numberParallelThreads is not None and 'numberParallelThreads' not in already_processed:
            already_processed.add('numberParallelThreads')
            outfile.write(' numberParallelThreads="%s"' % self.gds_format_integer(self.numberParallelThreads, input_name='numberParallelThreads'))
        if self.phaseLaunched is not None and 'phaseLaunched' not in already_processed:
            already_processed.add('phaseLaunched')
            outfile.write(' phaseLaunched="%s"' % self.gds_format_boolean(self.phaseLaunched, input_name='phaseLaunched'))
        if self.prospectLaunched is not None and 'prospectLaunched' not in already_processed:
            already_processed.add('prospectLaunched')
            outfile.write(' prospectLaunched="%s"' % self.gds_format_boolean(self.prospectLaunched, input_name='prospectLaunched'))
        if self.triangleFileProcessorLaunched is not None and 'triangleFileProcessorLaunched' not in already_processed:
            already_processed.add('triangleFileProcessorLaunched')
            outfile.write(' triangleFileProcessorLaunched="%s"' % self.gds_format_boolean(self.triangleFileProcessorLaunched, input_name='triangleFileProcessorLaunched'))
        if self.useBroadBand is not None and 'useBroadBand' not in already_processed:
            already_processed.add('useBroadBand')
            outfile.write(' useBroadBand="%s"' % self.gds_format_boolean(self.useBroadBand, input_name='useBroadBand'))
        if self.useSceneSpectra is not None and 'useSceneSpectra' not in already_processed:
            already_processed.add('useSceneSpectra')
            outfile.write(' useSceneSpectra="%s"' % self.gds_format_boolean(self.useSceneSpectra, input_name='useSceneSpectra'))
        if self.vegetationLaunched is not None and 'vegetationLaunched' not in already_processed:
            already_processed.add('vegetationLaunched')
            outfile.write(' vegetationLaunched="%s"' % self.gds_format_boolean(self.vegetationLaunched, input_name='vegetationLaunched'))
        if self.zippedResults is not None and 'zippedResults' not in already_processed:
            already_processed.add('zippedResults')
            outfile.write(' zippedResults="%s"' % self.gds_format_boolean(self.zippedResults, input_name='zippedResults'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartSequencerPreferences', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_DartSequencerPreferences', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.atmosphereMaketLaunched is not None:
            element.set('atmosphereMaketLaunched', self.gds_format_boolean(self.atmosphereMaketLaunched))
        if self.dartLaunched is not None:
            element.set('dartLaunched', self.gds_format_boolean(self.dartLaunched))
        if self.deleteAll is not None:
            element.set('deleteAll', self.gds_format_boolean(self.deleteAll))
        if self.deleteAtmosphere is not None:
            element.set('deleteAtmosphere', self.gds_format_boolean(self.deleteAtmosphere))
        if self.deleteAtmosphereMaket is not None:
            element.set('deleteAtmosphereMaket', self.gds_format_boolean(self.deleteAtmosphereMaket))
        if self.deleteDartLut is not None:
            element.set('deleteDartLut', self.gds_format_boolean(self.deleteDartLut))
        if self.deleteDartSequenceur is not None:
            element.set('deleteDartSequenceur', self.gds_format_boolean(self.deleteDartSequenceur))
        if self.deleteDartTxt is not None:
            element.set('deleteDartTxt', self.gds_format_boolean(self.deleteDartTxt))
        if self.deleteDirection is not None:
            element.set('deleteDirection', self.gds_format_boolean(self.deleteDirection))
        if self.deleteInputs is not None:
            element.set('deleteInputs', self.gds_format_boolean(self.deleteInputs))
        if self.deleteLibPhase is not None:
            element.set('deleteLibPhase', self.gds_format_boolean(self.deleteLibPhase))
        if self.deleteMaket is not None:
            element.set('deleteMaket', self.gds_format_boolean(self.deleteMaket))
        if self.deleteMaketTreeResults is not None:
            element.set('deleteMaketTreeResults', self.gds_format_boolean(self.deleteMaketTreeResults))
        if self.deleteTreePosition is not None:
            element.set('deleteTreePosition', self.gds_format_boolean(self.deleteTreePosition))
        if self.deleteTriangles is not None:
            element.set('deleteTriangles', self.gds_format_boolean(self.deleteTriangles))
        if self.demGeneratorLaunched is not None:
            element.set('demGeneratorLaunched', self.gds_format_boolean(self.demGeneratorLaunched))
        if self.directionLaunched is not None:
            element.set('directionLaunched', self.gds_format_boolean(self.directionLaunched))
        if self.displayEnabled is not None:
            element.set('displayEnabled', self.gds_format_boolean(self.displayEnabled))
        if self.genMode is not None:
            element.set('genMode', self.gds_format_string(self.genMode))
        if self.hapkeLaunched is not None:
            element.set('hapkeLaunched', self.gds_format_boolean(self.hapkeLaunched))
        if self.individualDisplayEnabled is not None:
            element.set('individualDisplayEnabled', self.gds_format_boolean(self.individualDisplayEnabled))
        if self.maketLaunched is not None:
            element.set('maketLaunched', self.gds_format_boolean(self.maketLaunched))
        if self.numberParallelThreads is not None:
            element.set('numberParallelThreads', self.gds_format_integer(self.numberParallelThreads))
        if self.phaseLaunched is not None:
            element.set('phaseLaunched', self.gds_format_boolean(self.phaseLaunched))
        if self.prospectLaunched is not None:
            element.set('prospectLaunched', self.gds_format_boolean(self.prospectLaunched))
        if self.triangleFileProcessorLaunched is not None:
            element.set('triangleFileProcessorLaunched', self.gds_format_boolean(self.triangleFileProcessorLaunched))
        if self.useBroadBand is not None:
            element.set('useBroadBand', self.gds_format_boolean(self.useBroadBand))
        if self.useSceneSpectra is not None:
            element.set('useSceneSpectra', self.gds_format_boolean(self.useSceneSpectra))
        if self.vegetationLaunched is not None:
            element.set('vegetationLaunched', self.gds_format_boolean(self.vegetationLaunched))
        if self.zippedResults is not None:
            element.set('zippedResults', self.gds_format_boolean(self.zippedResults))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartSequencerPreferences'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.atmosphereMaketLaunched is not None and 'atmosphereMaketLaunched' not in already_processed:
            already_processed.add('atmosphereMaketLaunched')
            showIndent(outfile, level)
            outfile.write('atmosphereMaketLaunched=%s,\n' % (self.atmosphereMaketLaunched,))
        if self.dartLaunched is not None and 'dartLaunched' not in already_processed:
            already_processed.add('dartLaunched')
            showIndent(outfile, level)
            outfile.write('dartLaunched=%s,\n' % (self.dartLaunched,))
        if self.deleteAll is not None and 'deleteAll' not in already_processed:
            already_processed.add('deleteAll')
            showIndent(outfile, level)
            outfile.write('deleteAll=%s,\n' % (self.deleteAll,))
        if self.deleteAtmosphere is not None and 'deleteAtmosphere' not in already_processed:
            already_processed.add('deleteAtmosphere')
            showIndent(outfile, level)
            outfile.write('deleteAtmosphere=%s,\n' % (self.deleteAtmosphere,))
        if self.deleteAtmosphereMaket is not None and 'deleteAtmosphereMaket' not in already_processed:
            already_processed.add('deleteAtmosphereMaket')
            showIndent(outfile, level)
            outfile.write('deleteAtmosphereMaket=%s,\n' % (self.deleteAtmosphereMaket,))
        if self.deleteDartLut is not None and 'deleteDartLut' not in already_processed:
            already_processed.add('deleteDartLut')
            showIndent(outfile, level)
            outfile.write('deleteDartLut=%s,\n' % (self.deleteDartLut,))
        if self.deleteDartSequenceur is not None and 'deleteDartSequenceur' not in already_processed:
            already_processed.add('deleteDartSequenceur')
            showIndent(outfile, level)
            outfile.write('deleteDartSequenceur=%s,\n' % (self.deleteDartSequenceur,))
        if self.deleteDartTxt is not None and 'deleteDartTxt' not in already_processed:
            already_processed.add('deleteDartTxt')
            showIndent(outfile, level)
            outfile.write('deleteDartTxt=%s,\n' % (self.deleteDartTxt,))
        if self.deleteDirection is not None and 'deleteDirection' not in already_processed:
            already_processed.add('deleteDirection')
            showIndent(outfile, level)
            outfile.write('deleteDirection=%s,\n' % (self.deleteDirection,))
        if self.deleteInputs is not None and 'deleteInputs' not in already_processed:
            already_processed.add('deleteInputs')
            showIndent(outfile, level)
            outfile.write('deleteInputs=%s,\n' % (self.deleteInputs,))
        if self.deleteLibPhase is not None and 'deleteLibPhase' not in already_processed:
            already_processed.add('deleteLibPhase')
            showIndent(outfile, level)
            outfile.write('deleteLibPhase=%s,\n' % (self.deleteLibPhase,))
        if self.deleteMaket is not None and 'deleteMaket' not in already_processed:
            already_processed.add('deleteMaket')
            showIndent(outfile, level)
            outfile.write('deleteMaket=%s,\n' % (self.deleteMaket,))
        if self.deleteMaketTreeResults is not None and 'deleteMaketTreeResults' not in already_processed:
            already_processed.add('deleteMaketTreeResults')
            showIndent(outfile, level)
            outfile.write('deleteMaketTreeResults=%s,\n' % (self.deleteMaketTreeResults,))
        if self.deleteTreePosition is not None and 'deleteTreePosition' not in already_processed:
            already_processed.add('deleteTreePosition')
            showIndent(outfile, level)
            outfile.write('deleteTreePosition=%s,\n' % (self.deleteTreePosition,))
        if self.deleteTriangles is not None and 'deleteTriangles' not in already_processed:
            already_processed.add('deleteTriangles')
            showIndent(outfile, level)
            outfile.write('deleteTriangles=%s,\n' % (self.deleteTriangles,))
        if self.demGeneratorLaunched is not None and 'demGeneratorLaunched' not in already_processed:
            already_processed.add('demGeneratorLaunched')
            showIndent(outfile, level)
            outfile.write('demGeneratorLaunched=%s,\n' % (self.demGeneratorLaunched,))
        if self.directionLaunched is not None and 'directionLaunched' not in already_processed:
            already_processed.add('directionLaunched')
            showIndent(outfile, level)
            outfile.write('directionLaunched=%s,\n' % (self.directionLaunched,))
        if self.displayEnabled is not None and 'displayEnabled' not in already_processed:
            already_processed.add('displayEnabled')
            showIndent(outfile, level)
            outfile.write('displayEnabled=%s,\n' % (self.displayEnabled,))
        if self.genMode is not None and 'genMode' not in already_processed:
            already_processed.add('genMode')
            showIndent(outfile, level)
            outfile.write('genMode="%s",\n' % (self.genMode,))
        if self.hapkeLaunched is not None and 'hapkeLaunched' not in already_processed:
            already_processed.add('hapkeLaunched')
            showIndent(outfile, level)
            outfile.write('hapkeLaunched=%s,\n' % (self.hapkeLaunched,))
        if self.individualDisplayEnabled is not None and 'individualDisplayEnabled' not in already_processed:
            already_processed.add('individualDisplayEnabled')
            showIndent(outfile, level)
            outfile.write('individualDisplayEnabled=%s,\n' % (self.individualDisplayEnabled,))
        if self.maketLaunched is not None and 'maketLaunched' not in already_processed:
            already_processed.add('maketLaunched')
            showIndent(outfile, level)
            outfile.write('maketLaunched=%s,\n' % (self.maketLaunched,))
        if self.numberParallelThreads is not None and 'numberParallelThreads' not in already_processed:
            already_processed.add('numberParallelThreads')
            showIndent(outfile, level)
            outfile.write('numberParallelThreads=%d,\n' % (self.numberParallelThreads,))
        if self.phaseLaunched is not None and 'phaseLaunched' not in already_processed:
            already_processed.add('phaseLaunched')
            showIndent(outfile, level)
            outfile.write('phaseLaunched=%s,\n' % (self.phaseLaunched,))
        if self.prospectLaunched is not None and 'prospectLaunched' not in already_processed:
            already_processed.add('prospectLaunched')
            showIndent(outfile, level)
            outfile.write('prospectLaunched=%s,\n' % (self.prospectLaunched,))
        if self.triangleFileProcessorLaunched is not None and 'triangleFileProcessorLaunched' not in already_processed:
            already_processed.add('triangleFileProcessorLaunched')
            showIndent(outfile, level)
            outfile.write('triangleFileProcessorLaunched=%s,\n' % (self.triangleFileProcessorLaunched,))
        if self.useBroadBand is not None and 'useBroadBand' not in already_processed:
            already_processed.add('useBroadBand')
            showIndent(outfile, level)
            outfile.write('useBroadBand=%s,\n' % (self.useBroadBand,))
        if self.useSceneSpectra is not None and 'useSceneSpectra' not in already_processed:
            already_processed.add('useSceneSpectra')
            showIndent(outfile, level)
            outfile.write('useSceneSpectra=%s,\n' % (self.useSceneSpectra,))
        if self.vegetationLaunched is not None and 'vegetationLaunched' not in already_processed:
            already_processed.add('vegetationLaunched')
            showIndent(outfile, level)
            outfile.write('vegetationLaunched=%s,\n' % (self.vegetationLaunched,))
        if self.zippedResults is not None and 'zippedResults' not in already_processed:
            already_processed.add('zippedResults')
            showIndent(outfile, level)
            outfile.write('zippedResults=%s,\n' % (self.zippedResults,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('atmosphereMaketLaunched', node)
        if value is not None and 'atmosphereMaketLaunched' not in already_processed:
            already_processed.add('atmosphereMaketLaunched')
            if value in ('true', '1'):
                self.atmosphereMaketLaunched = True
            elif value in ('false', '0'):
                self.atmosphereMaketLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('dartLaunched', node)
        if value is not None and 'dartLaunched' not in already_processed:
            already_processed.add('dartLaunched')
            if value in ('true', '1'):
                self.dartLaunched = True
            elif value in ('false', '0'):
                self.dartLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteAll', node)
        if value is not None and 'deleteAll' not in already_processed:
            already_processed.add('deleteAll')
            if value in ('true', '1'):
                self.deleteAll = True
            elif value in ('false', '0'):
                self.deleteAll = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteAtmosphere', node)
        if value is not None and 'deleteAtmosphere' not in already_processed:
            already_processed.add('deleteAtmosphere')
            if value in ('true', '1'):
                self.deleteAtmosphere = True
            elif value in ('false', '0'):
                self.deleteAtmosphere = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteAtmosphereMaket', node)
        if value is not None and 'deleteAtmosphereMaket' not in already_processed:
            already_processed.add('deleteAtmosphereMaket')
            if value in ('true', '1'):
                self.deleteAtmosphereMaket = True
            elif value in ('false', '0'):
                self.deleteAtmosphereMaket = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteDartLut', node)
        if value is not None and 'deleteDartLut' not in already_processed:
            already_processed.add('deleteDartLut')
            if value in ('true', '1'):
                self.deleteDartLut = True
            elif value in ('false', '0'):
                self.deleteDartLut = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteDartSequenceur', node)
        if value is not None and 'deleteDartSequenceur' not in already_processed:
            already_processed.add('deleteDartSequenceur')
            if value in ('true', '1'):
                self.deleteDartSequenceur = True
            elif value in ('false', '0'):
                self.deleteDartSequenceur = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteDartTxt', node)
        if value is not None and 'deleteDartTxt' not in already_processed:
            already_processed.add('deleteDartTxt')
            if value in ('true', '1'):
                self.deleteDartTxt = True
            elif value in ('false', '0'):
                self.deleteDartTxt = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteDirection', node)
        if value is not None and 'deleteDirection' not in already_processed:
            already_processed.add('deleteDirection')
            if value in ('true', '1'):
                self.deleteDirection = True
            elif value in ('false', '0'):
                self.deleteDirection = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteInputs', node)
        if value is not None and 'deleteInputs' not in already_processed:
            already_processed.add('deleteInputs')
            if value in ('true', '1'):
                self.deleteInputs = True
            elif value in ('false', '0'):
                self.deleteInputs = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteLibPhase', node)
        if value is not None and 'deleteLibPhase' not in already_processed:
            already_processed.add('deleteLibPhase')
            if value in ('true', '1'):
                self.deleteLibPhase = True
            elif value in ('false', '0'):
                self.deleteLibPhase = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteMaket', node)
        if value is not None and 'deleteMaket' not in already_processed:
            already_processed.add('deleteMaket')
            if value in ('true', '1'):
                self.deleteMaket = True
            elif value in ('false', '0'):
                self.deleteMaket = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteMaketTreeResults', node)
        if value is not None and 'deleteMaketTreeResults' not in already_processed:
            already_processed.add('deleteMaketTreeResults')
            if value in ('true', '1'):
                self.deleteMaketTreeResults = True
            elif value in ('false', '0'):
                self.deleteMaketTreeResults = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteTreePosition', node)
        if value is not None and 'deleteTreePosition' not in already_processed:
            already_processed.add('deleteTreePosition')
            if value in ('true', '1'):
                self.deleteTreePosition = True
            elif value in ('false', '0'):
                self.deleteTreePosition = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('deleteTriangles', node)
        if value is not None and 'deleteTriangles' not in already_processed:
            already_processed.add('deleteTriangles')
            if value in ('true', '1'):
                self.deleteTriangles = True
            elif value in ('false', '0'):
                self.deleteTriangles = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('demGeneratorLaunched', node)
        if value is not None and 'demGeneratorLaunched' not in already_processed:
            already_processed.add('demGeneratorLaunched')
            if value in ('true', '1'):
                self.demGeneratorLaunched = True
            elif value in ('false', '0'):
                self.demGeneratorLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('directionLaunched', node)
        if value is not None and 'directionLaunched' not in already_processed:
            already_processed.add('directionLaunched')
            if value in ('true', '1'):
                self.directionLaunched = True
            elif value in ('false', '0'):
                self.directionLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('displayEnabled', node)
        if value is not None and 'displayEnabled' not in already_processed:
            already_processed.add('displayEnabled')
            if value in ('true', '1'):
                self.displayEnabled = True
            elif value in ('false', '0'):
                self.displayEnabled = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('genMode', node)
        if value is not None and 'genMode' not in already_processed:
            already_processed.add('genMode')
            self.genMode = value
        value = find_attr_value_('hapkeLaunched', node)
        if value is not None and 'hapkeLaunched' not in already_processed:
            already_processed.add('hapkeLaunched')
            if value in ('true', '1'):
                self.hapkeLaunched = True
            elif value in ('false', '0'):
                self.hapkeLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('individualDisplayEnabled', node)
        if value is not None and 'individualDisplayEnabled' not in already_processed:
            already_processed.add('individualDisplayEnabled')
            if value in ('true', '1'):
                self.individualDisplayEnabled = True
            elif value in ('false', '0'):
                self.individualDisplayEnabled = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('maketLaunched', node)
        if value is not None and 'maketLaunched' not in already_processed:
            already_processed.add('maketLaunched')
            if value in ('true', '1'):
                self.maketLaunched = True
            elif value in ('false', '0'):
                self.maketLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('numberParallelThreads', node)
        if value is not None and 'numberParallelThreads' not in already_processed:
            already_processed.add('numberParallelThreads')
            try:
                self.numberParallelThreads = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('phaseLaunched', node)
        if value is not None and 'phaseLaunched' not in already_processed:
            already_processed.add('phaseLaunched')
            if value in ('true', '1'):
                self.phaseLaunched = True
            elif value in ('false', '0'):
                self.phaseLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('prospectLaunched', node)
        if value is not None and 'prospectLaunched' not in already_processed:
            already_processed.add('prospectLaunched')
            if value in ('true', '1'):
                self.prospectLaunched = True
            elif value in ('false', '0'):
                self.prospectLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('triangleFileProcessorLaunched', node)
        if value is not None and 'triangleFileProcessorLaunched' not in already_processed:
            already_processed.add('triangleFileProcessorLaunched')
            if value in ('true', '1'):
                self.triangleFileProcessorLaunched = True
            elif value in ('false', '0'):
                self.triangleFileProcessorLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('useBroadBand', node)
        if value is not None and 'useBroadBand' not in already_processed:
            already_processed.add('useBroadBand')
            if value in ('true', '1'):
                self.useBroadBand = True
            elif value in ('false', '0'):
                self.useBroadBand = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('useSceneSpectra', node)
        if value is not None and 'useSceneSpectra' not in already_processed:
            already_processed.add('useSceneSpectra')
            if value in ('true', '1'):
                self.useSceneSpectra = True
            elif value in ('false', '0'):
                self.useSceneSpectra = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('vegetationLaunched', node)
        if value is not None and 'vegetationLaunched' not in already_processed:
            already_processed.add('vegetationLaunched')
            if value in ('true', '1'):
                self.vegetationLaunched = True
            elif value in ('false', '0'):
                self.vegetationLaunched = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('zippedResults', node)
        if value is not None and 'zippedResults' not in already_processed:
            already_processed.add('zippedResults')
            if value in ('true', '1'):
                self.zippedResults = True
            elif value in ('false', '0'):
                self.zippedResults = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartSequencerPreferences


class create_DartLutPreferences(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('addedDirection', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('atmosToa', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('atmosToaOrdre', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('coupl', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('fluorescence', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('generateLUT', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('iterx', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('luminance', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('maketCoverage', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('ordre', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('otherIter', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('phiMax', 'xs:float', 0, 1, {'use': 'optional'}),
        MemberSpec_('phiMin', 'xs:float', 0, 1, {'use': 'optional'}),
        MemberSpec_('productsPerType', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('reflectance', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('sensor', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('storeIndirect', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('thetaMax', 'xs:decimal', 0, 1, {'use': 'optional'}),
        MemberSpec_('thetaMin', 'xs:decimal', 0, 1, {'use': 'optional'}),
        MemberSpec_('toa', 'xs:boolean', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, addedDirection=False, atmosToa=True, atmosToaOrdre=False, coupl=False, fluorescence=False, generateLUT=True, iterx=True, luminance=True, maketCoverage=False, ordre=False, otherIter=False, phiMax=None, phiMin=None, productsPerType=False, reflectance=True, sensor=True, storeIndirect=False, thetaMax=None, thetaMin=None, toa=True):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','_DartLutPreferences')
        self.attrib = ['addedDirection', 'atmosToa', 'atmosToaOrdre', 'coupl', 'fluorescence', 'generateLUT', 'iterx', 'luminance', 'maketCoverage', 'ordre', 'otherIter', 'phiMax', 'phiMin', 'productsPerType', 'reflectance', 'sensor', 'storeIndirect', 'thetaMax', 'thetaMin', 'toa']
        self.children = []
        self.parent = None
        self._addedDirection = _cast(bool, addedDirection)
        self._atmosToa = _cast(bool, atmosToa)
        self._atmosToaOrdre = _cast(bool, atmosToaOrdre)
        self._coupl = _cast(bool, coupl)
        self._fluorescence = _cast(bool, fluorescence)
        self._generateLUT = _cast(bool, generateLUT)
        self._iterx = _cast(bool, iterx)
        self._luminance = _cast(bool, luminance)
        self._maketCoverage = _cast(bool, maketCoverage)
        self._ordre = _cast(bool, ordre)
        self._otherIter = _cast(bool, otherIter)
        self._phiMax = _cast(float, phiMax)
        self._phiMin = _cast(float, phiMin)
        self._productsPerType = _cast(bool, productsPerType)
        self._reflectance = _cast(bool, reflectance)
        self._sensor = _cast(bool, sensor)
        self._storeIndirect = _cast(bool, storeIndirect)
        self._thetaMax = _cast(float, thetaMax)
        self._thetaMin = _cast(float, thetaMin)
        self._toa = _cast(bool, toa)
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartLutPreferences)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartLutPreferences.subclass:
            return create_DartLutPreferences.subclass(*args_, **kwargs_)
        else:
            return create_DartLutPreferences(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_addedDirection(self): return self._addedDirection
    def set_addedDirection(self, value):
        self._addedDirection = value
        update_node(self,self.troot,'sequence')
    addedDirection = property(get_addedDirection, set_addedDirection)
    def get_atmosToa(self): return self._atmosToa
    def set_atmosToa(self, value):
        self._atmosToa = value
        update_node(self,self.troot,'sequence')
    atmosToa = property(get_atmosToa, set_atmosToa)
    def get_atmosToaOrdre(self): return self._atmosToaOrdre
    def set_atmosToaOrdre(self, value):
        self._atmosToaOrdre = value
        update_node(self,self.troot,'sequence')
    atmosToaOrdre = property(get_atmosToaOrdre, set_atmosToaOrdre)
    def get_coupl(self): return self._coupl
    def set_coupl(self, value):
        self._coupl = value
        update_node(self,self.troot,'sequence')
    coupl = property(get_coupl, set_coupl)
    def get_fluorescence(self): return self._fluorescence
    def set_fluorescence(self, value):
        self._fluorescence = value
        update_node(self,self.troot,'sequence')
    fluorescence = property(get_fluorescence, set_fluorescence)
    def get_generateLUT(self): return self._generateLUT
    def set_generateLUT(self, value):
        self._generateLUT = value
        update_node(self,self.troot,'sequence')
    generateLUT = property(get_generateLUT, set_generateLUT)
    def get_iterx(self): return self._iterx
    def set_iterx(self, value):
        self._iterx = value
        update_node(self,self.troot,'sequence')
    iterx = property(get_iterx, set_iterx)
    def get_luminance(self): return self._luminance
    def set_luminance(self, value):
        self._luminance = value
        update_node(self,self.troot,'sequence')
    luminance = property(get_luminance, set_luminance)
    def get_maketCoverage(self): return self._maketCoverage
    def set_maketCoverage(self, value):
        self._maketCoverage = value
        update_node(self,self.troot,'sequence')
    maketCoverage = property(get_maketCoverage, set_maketCoverage)
    def get_ordre(self): return self._ordre
    def set_ordre(self, value):
        self._ordre = value
        update_node(self,self.troot,'sequence')
    ordre = property(get_ordre, set_ordre)
    def get_otherIter(self): return self._otherIter
    def set_otherIter(self, value):
        self._otherIter = value
        update_node(self,self.troot,'sequence')
    otherIter = property(get_otherIter, set_otherIter)
    def get_phiMax(self): return self._phiMax
    def set_phiMax(self, value):
        self._phiMax = value
        update_node(self,self.troot,'sequence')
    phiMax = property(get_phiMax, set_phiMax)
    def get_phiMin(self): return self._phiMin
    def set_phiMin(self, value):
        self._phiMin = value
        update_node(self,self.troot,'sequence')
    phiMin = property(get_phiMin, set_phiMin)
    def get_productsPerType(self): return self._productsPerType
    def set_productsPerType(self, value):
        self._productsPerType = value
        update_node(self,self.troot,'sequence')
    productsPerType = property(get_productsPerType, set_productsPerType)
    def get_reflectance(self): return self._reflectance
    def set_reflectance(self, value):
        self._reflectance = value
        update_node(self,self.troot,'sequence')
    reflectance = property(get_reflectance, set_reflectance)
    def get_sensor(self): return self._sensor
    def set_sensor(self, value):
        self._sensor = value
        update_node(self,self.troot,'sequence')
    sensor = property(get_sensor, set_sensor)
    def get_storeIndirect(self): return self._storeIndirect
    def set_storeIndirect(self, value):
        self._storeIndirect = value
        update_node(self,self.troot,'sequence')
    storeIndirect = property(get_storeIndirect, set_storeIndirect)
    def get_thetaMax(self): return self._thetaMax
    def set_thetaMax(self, value):
        self._thetaMax = value
        update_node(self,self.troot,'sequence')
    thetaMax = property(get_thetaMax, set_thetaMax)
    def get_thetaMin(self): return self._thetaMin
    def set_thetaMin(self, value):
        self._thetaMin = value
        update_node(self,self.troot,'sequence')
    thetaMin = property(get_thetaMin, set_thetaMin)
    def get_toa(self): return self._toa
    def set_toa(self, value):
        self._toa = value
        update_node(self,self.troot,'sequence')
    toa = property(get_toa, set_toa)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartLutPreferences', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartLutPreferences')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartLutPreferences')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartLutPreferences', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartLutPreferences'):
        if self.addedDirection is not None and 'addedDirection' not in already_processed:
            already_processed.add('addedDirection')
            outfile.write(' addedDirection="%s"' % self.gds_format_boolean(self.addedDirection, input_name='addedDirection'))
        if self.atmosToa is not None and 'atmosToa' not in already_processed:
            already_processed.add('atmosToa')
            outfile.write(' atmosToa="%s"' % self.gds_format_boolean(self.atmosToa, input_name='atmosToa'))
        if self.atmosToaOrdre is not None and 'atmosToaOrdre' not in already_processed:
            already_processed.add('atmosToaOrdre')
            outfile.write(' atmosToaOrdre="%s"' % self.gds_format_boolean(self.atmosToaOrdre, input_name='atmosToaOrdre'))
        if self.coupl is not None and 'coupl' not in already_processed:
            already_processed.add('coupl')
            outfile.write(' coupl="%s"' % self.gds_format_boolean(self.coupl, input_name='coupl'))
        if self.fluorescence is not None and 'fluorescence' not in already_processed:
            already_processed.add('fluorescence')
            outfile.write(' fluorescence="%s"' % self.gds_format_boolean(self.fluorescence, input_name='fluorescence'))
        if self.generateLUT is not None and 'generateLUT' not in already_processed:
            already_processed.add('generateLUT')
            outfile.write(' generateLUT="%s"' % self.gds_format_boolean(self.generateLUT, input_name='generateLUT'))
        if self.iterx is not None and 'iterx' not in already_processed:
            already_processed.add('iterx')
            outfile.write(' iterx="%s"' % self.gds_format_boolean(self.iterx, input_name='iterx'))
        if self.luminance is not None and 'luminance' not in already_processed:
            already_processed.add('luminance')
            outfile.write(' luminance="%s"' % self.gds_format_boolean(self.luminance, input_name='luminance'))
        if self.maketCoverage is not None and 'maketCoverage' not in already_processed:
            already_processed.add('maketCoverage')
            outfile.write(' maketCoverage="%s"' % self.gds_format_boolean(self.maketCoverage, input_name='maketCoverage'))
        if self.ordre is not None and 'ordre' not in already_processed:
            already_processed.add('ordre')
            outfile.write(' ordre="%s"' % self.gds_format_boolean(self.ordre, input_name='ordre'))
        if self.otherIter is not None and 'otherIter' not in already_processed:
            already_processed.add('otherIter')
            outfile.write(' otherIter="%s"' % self.gds_format_boolean(self.otherIter, input_name='otherIter'))
        if self.phiMax is not None and 'phiMax' not in already_processed:
            already_processed.add('phiMax')
            outfile.write(' phiMax="%s"' % self.gds_format_float(self.phiMax, input_name='phiMax'))
        if self.phiMin is not None and 'phiMin' not in already_processed:
            already_processed.add('phiMin')
            outfile.write(' phiMin="%s"' % self.gds_format_float(self.phiMin, input_name='phiMin'))
        if self.productsPerType is not None and 'productsPerType' not in already_processed:
            already_processed.add('productsPerType')
            outfile.write(' productsPerType="%s"' % self.gds_format_boolean(self.productsPerType, input_name='productsPerType'))
        if self.reflectance is not None and 'reflectance' not in already_processed:
            already_processed.add('reflectance')
            outfile.write(' reflectance="%s"' % self.gds_format_boolean(self.reflectance, input_name='reflectance'))
        if self.sensor is not None and 'sensor' not in already_processed:
            already_processed.add('sensor')
            outfile.write(' sensor="%s"' % self.gds_format_boolean(self.sensor, input_name='sensor'))
        if self.storeIndirect is not None and 'storeIndirect' not in already_processed:
            already_processed.add('storeIndirect')
            outfile.write(' storeIndirect="%s"' % self.gds_format_boolean(self.storeIndirect, input_name='storeIndirect'))
        if self.thetaMax is not None and 'thetaMax' not in already_processed:
            already_processed.add('thetaMax')
            outfile.write(' thetaMax="%s"' % self.gds_format_float(self.thetaMax, input_name='thetaMax'))
        if self.thetaMin is not None and 'thetaMin' not in already_processed:
            already_processed.add('thetaMin')
            outfile.write(' thetaMin="%s"' % self.gds_format_float(self.thetaMin, input_name='thetaMin'))
        if self.toa is not None and 'toa' not in already_processed:
            already_processed.add('toa')
            outfile.write(' toa="%s"' % self.gds_format_boolean(self.toa, input_name='toa'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartLutPreferences', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_DartLutPreferences', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.addedDirection is not None:
            element.set('addedDirection', self.gds_format_boolean(self.addedDirection))
        if self.atmosToa is not None:
            element.set('atmosToa', self.gds_format_boolean(self.atmosToa))
        if self.atmosToaOrdre is not None:
            element.set('atmosToaOrdre', self.gds_format_boolean(self.atmosToaOrdre))
        if self.coupl is not None:
            element.set('coupl', self.gds_format_boolean(self.coupl))
        if self.fluorescence is not None:
            element.set('fluorescence', self.gds_format_boolean(self.fluorescence))
        if self.generateLUT is not None:
            element.set('generateLUT', self.gds_format_boolean(self.generateLUT))
        if self.iterx is not None:
            element.set('iterx', self.gds_format_boolean(self.iterx))
        if self.luminance is not None:
            element.set('luminance', self.gds_format_boolean(self.luminance))
        if self.maketCoverage is not None:
            element.set('maketCoverage', self.gds_format_boolean(self.maketCoverage))
        if self.ordre is not None:
            element.set('ordre', self.gds_format_boolean(self.ordre))
        if self.otherIter is not None:
            element.set('otherIter', self.gds_format_boolean(self.otherIter))
        if self.phiMax is not None:
            element.set('phiMax', self.gds_format_float(self.phiMax))
        if self.phiMin is not None:
            element.set('phiMin', self.gds_format_float(self.phiMin))
        if self.productsPerType is not None:
            element.set('productsPerType', self.gds_format_boolean(self.productsPerType))
        if self.reflectance is not None:
            element.set('reflectance', self.gds_format_boolean(self.reflectance))
        if self.sensor is not None:
            element.set('sensor', self.gds_format_boolean(self.sensor))
        if self.storeIndirect is not None:
            element.set('storeIndirect', self.gds_format_boolean(self.storeIndirect))
        if self.thetaMax is not None:
            element.set('thetaMax', self.gds_format_float(self.thetaMax))
        if self.thetaMin is not None:
            element.set('thetaMin', self.gds_format_float(self.thetaMin))
        if self.toa is not None:
            element.set('toa', self.gds_format_boolean(self.toa))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartLutPreferences'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.addedDirection is not None and 'addedDirection' not in already_processed:
            already_processed.add('addedDirection')
            showIndent(outfile, level)
            outfile.write('addedDirection=%s,\n' % (self.addedDirection,))
        if self.atmosToa is not None and 'atmosToa' not in already_processed:
            already_processed.add('atmosToa')
            showIndent(outfile, level)
            outfile.write('atmosToa=%s,\n' % (self.atmosToa,))
        if self.atmosToaOrdre is not None and 'atmosToaOrdre' not in already_processed:
            already_processed.add('atmosToaOrdre')
            showIndent(outfile, level)
            outfile.write('atmosToaOrdre=%s,\n' % (self.atmosToaOrdre,))
        if self.coupl is not None and 'coupl' not in already_processed:
            already_processed.add('coupl')
            showIndent(outfile, level)
            outfile.write('coupl=%s,\n' % (self.coupl,))
        if self.fluorescence is not None and 'fluorescence' not in already_processed:
            already_processed.add('fluorescence')
            showIndent(outfile, level)
            outfile.write('fluorescence=%s,\n' % (self.fluorescence,))
        if self.generateLUT is not None and 'generateLUT' not in already_processed:
            already_processed.add('generateLUT')
            showIndent(outfile, level)
            outfile.write('generateLUT=%s,\n' % (self.generateLUT,))
        if self.iterx is not None and 'iterx' not in already_processed:
            already_processed.add('iterx')
            showIndent(outfile, level)
            outfile.write('iterx=%s,\n' % (self.iterx,))
        if self.luminance is not None and 'luminance' not in already_processed:
            already_processed.add('luminance')
            showIndent(outfile, level)
            outfile.write('luminance=%s,\n' % (self.luminance,))
        if self.maketCoverage is not None and 'maketCoverage' not in already_processed:
            already_processed.add('maketCoverage')
            showIndent(outfile, level)
            outfile.write('maketCoverage=%s,\n' % (self.maketCoverage,))
        if self.ordre is not None and 'ordre' not in already_processed:
            already_processed.add('ordre')
            showIndent(outfile, level)
            outfile.write('ordre=%s,\n' % (self.ordre,))
        if self.otherIter is not None and 'otherIter' not in already_processed:
            already_processed.add('otherIter')
            showIndent(outfile, level)
            outfile.write('otherIter=%s,\n' % (self.otherIter,))
        if self.phiMax is not None and 'phiMax' not in already_processed:
            already_processed.add('phiMax')
            showIndent(outfile, level)
            outfile.write('phiMax=%f,\n' % (self.phiMax,))
        if self.phiMin is not None and 'phiMin' not in already_processed:
            already_processed.add('phiMin')
            showIndent(outfile, level)
            outfile.write('phiMin=%f,\n' % (self.phiMin,))
        if self.productsPerType is not None and 'productsPerType' not in already_processed:
            already_processed.add('productsPerType')
            showIndent(outfile, level)
            outfile.write('productsPerType=%s,\n' % (self.productsPerType,))
        if self.reflectance is not None and 'reflectance' not in already_processed:
            already_processed.add('reflectance')
            showIndent(outfile, level)
            outfile.write('reflectance=%s,\n' % (self.reflectance,))
        if self.sensor is not None and 'sensor' not in already_processed:
            already_processed.add('sensor')
            showIndent(outfile, level)
            outfile.write('sensor=%s,\n' % (self.sensor,))
        if self.storeIndirect is not None and 'storeIndirect' not in already_processed:
            already_processed.add('storeIndirect')
            showIndent(outfile, level)
            outfile.write('storeIndirect=%s,\n' % (self.storeIndirect,))
        if self.thetaMax is not None and 'thetaMax' not in already_processed:
            already_processed.add('thetaMax')
            showIndent(outfile, level)
            outfile.write('thetaMax=%f,\n' % (self.thetaMax,))
        if self.thetaMin is not None and 'thetaMin' not in already_processed:
            already_processed.add('thetaMin')
            showIndent(outfile, level)
            outfile.write('thetaMin=%f,\n' % (self.thetaMin,))
        if self.toa is not None and 'toa' not in already_processed:
            already_processed.add('toa')
            showIndent(outfile, level)
            outfile.write('toa=%s,\n' % (self.toa,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('addedDirection', node)
        if value is not None and 'addedDirection' not in already_processed:
            already_processed.add('addedDirection')
            if value in ('true', '1'):
                self.addedDirection = True
            elif value in ('false', '0'):
                self.addedDirection = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('atmosToa', node)
        if value is not None and 'atmosToa' not in already_processed:
            already_processed.add('atmosToa')
            if value in ('true', '1'):
                self.atmosToa = True
            elif value in ('false', '0'):
                self.atmosToa = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('atmosToaOrdre', node)
        if value is not None and 'atmosToaOrdre' not in already_processed:
            already_processed.add('atmosToaOrdre')
            if value in ('true', '1'):
                self.atmosToaOrdre = True
            elif value in ('false', '0'):
                self.atmosToaOrdre = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('coupl', node)
        if value is not None and 'coupl' not in already_processed:
            already_processed.add('coupl')
            if value in ('true', '1'):
                self.coupl = True
            elif value in ('false', '0'):
                self.coupl = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('fluorescence', node)
        if value is not None and 'fluorescence' not in already_processed:
            already_processed.add('fluorescence')
            if value in ('true', '1'):
                self.fluorescence = True
            elif value in ('false', '0'):
                self.fluorescence = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('generateLUT', node)
        if value is not None and 'generateLUT' not in already_processed:
            already_processed.add('generateLUT')
            if value in ('true', '1'):
                self.generateLUT = True
            elif value in ('false', '0'):
                self.generateLUT = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('iterx', node)
        if value is not None and 'iterx' not in already_processed:
            already_processed.add('iterx')
            if value in ('true', '1'):
                self.iterx = True
            elif value in ('false', '0'):
                self.iterx = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('luminance', node)
        if value is not None and 'luminance' not in already_processed:
            already_processed.add('luminance')
            if value in ('true', '1'):
                self.luminance = True
            elif value in ('false', '0'):
                self.luminance = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('maketCoverage', node)
        if value is not None and 'maketCoverage' not in already_processed:
            already_processed.add('maketCoverage')
            if value in ('true', '1'):
                self.maketCoverage = True
            elif value in ('false', '0'):
                self.maketCoverage = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('ordre', node)
        if value is not None and 'ordre' not in already_processed:
            already_processed.add('ordre')
            if value in ('true', '1'):
                self.ordre = True
            elif value in ('false', '0'):
                self.ordre = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('otherIter', node)
        if value is not None and 'otherIter' not in already_processed:
            already_processed.add('otherIter')
            if value in ('true', '1'):
                self.otherIter = True
            elif value in ('false', '0'):
                self.otherIter = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('phiMax', node)
        if value is not None and 'phiMax' not in already_processed:
            already_processed.add('phiMax')
            try:
                self.phiMax = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (phiMax): %s' % exp)
        value = find_attr_value_('phiMin', node)
        if value is not None and 'phiMin' not in already_processed:
            already_processed.add('phiMin')
            try:
                self.phiMin = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (phiMin): %s' % exp)
        value = find_attr_value_('productsPerType', node)
        if value is not None and 'productsPerType' not in already_processed:
            already_processed.add('productsPerType')
            if value in ('true', '1'):
                self.productsPerType = True
            elif value in ('false', '0'):
                self.productsPerType = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('reflectance', node)
        if value is not None and 'reflectance' not in already_processed:
            already_processed.add('reflectance')
            if value in ('true', '1'):
                self.reflectance = True
            elif value in ('false', '0'):
                self.reflectance = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('sensor', node)
        if value is not None and 'sensor' not in already_processed:
            already_processed.add('sensor')
            if value in ('true', '1'):
                self.sensor = True
            elif value in ('false', '0'):
                self.sensor = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('storeIndirect', node)
        if value is not None and 'storeIndirect' not in already_processed:
            already_processed.add('storeIndirect')
            if value in ('true', '1'):
                self.storeIndirect = True
            elif value in ('false', '0'):
                self.storeIndirect = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('thetaMax', node)
        if value is not None and 'thetaMax' not in already_processed:
            already_processed.add('thetaMax')
            try:
                self.thetaMax = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (thetaMax): %s' % exp)
        value = find_attr_value_('thetaMin', node)
        if value is not None and 'thetaMin' not in already_processed:
            already_processed.add('thetaMin')
            try:
                self.thetaMin = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (thetaMin): %s' % exp)
        value = find_attr_value_('toa', node)
        if value is not None and 'toa' not in already_processed:
            already_processed.add('toa')
            if value in ('true', '1'):
                self.toa = True
            elif value in ('false', '0'):
                self.toa = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartLutPreferences


class create_DartSequencerDescriptor(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('sequenceName', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('DartSequencerDescriptorEntries', '_DartSequencerDescriptorEntries', 0, 0, {'type': '_DartSequencerDescriptorEntries', 'name': 'DartSequencerDescriptorEntries'}, None),
        MemberSpec_('DartSequencerPreferences', '_DartSequencerPreferences', 0, 0, {'type': '_DartSequencerPreferences', 'name': 'DartSequencerPreferences'}, None),
        MemberSpec_('DartLutPreferences', '_DartLutPreferences', 0, 0, {'type': '_DartLutPreferences', 'name': 'DartLutPreferences'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, sequenceName=None, DartSequencerDescriptorEntries=None, DartSequencerPreferences=None, DartLutPreferences=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','_DartSequencerDescriptor')
        self.attrib = ['sequenceName']
        self.children = ['DartSequencerDescriptorEntries', 'DartSequencerPreferences', 'DartLutPreferences']
        self.parent = None
        self._sequenceName = _cast(None, sequenceName)
        self._DartSequencerDescriptorEntries = DartSequencerDescriptorEntries
        self._DartSequencerPreferences = DartSequencerPreferences
        self._DartLutPreferences = DartLutPreferences
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartSequencerDescriptor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartSequencerDescriptor.subclass:
            return create_DartSequencerDescriptor.subclass(*args_, **kwargs_)
        else:
            return create_DartSequencerDescriptor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DartSequencerDescriptorEntries(self): return self._DartSequencerDescriptorEntries
    def set_DartSequencerDescriptorEntries(self, value):
        if value is not None:
            checkclass(value, create_DartSequencerDescriptorEntries)
            value.parent = self
        self._DartSequencerDescriptorEntries = value
    DartSequencerDescriptorEntries = property(get_DartSequencerDescriptorEntries, set_DartSequencerDescriptorEntries)
    def get_DartSequencerPreferences(self): return self._DartSequencerPreferences
    def set_DartSequencerPreferences(self, value):
        if value is not None:
            checkclass(value, create_DartSequencerPreferences)
            value.parent = self
        self._DartSequencerPreferences = value
    DartSequencerPreferences = property(get_DartSequencerPreferences, set_DartSequencerPreferences)
    def get_DartLutPreferences(self): return self._DartLutPreferences
    def set_DartLutPreferences(self, value):
        if value is not None:
            checkclass(value, create_DartLutPreferences)
            value.parent = self
        self._DartLutPreferences = value
    DartLutPreferences = property(get_DartLutPreferences, set_DartLutPreferences)
    def get_sequenceName(self): return self._sequenceName
    def set_sequenceName(self, value):
        self._sequenceName = value
        update_node(self,self.troot,'sequence')
    sequenceName = property(get_sequenceName, set_sequenceName)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.DartSequencerDescriptorEntries is not None or
            self.DartSequencerPreferences is not None or
            self.DartLutPreferences is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptor', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartSequencerDescriptor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartSequencerDescriptor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartSequencerDescriptor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartSequencerDescriptor'):
        if self.sequenceName is not None and 'sequenceName' not in already_processed:
            already_processed.add('sequenceName')
            outfile.write(' sequenceName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sequenceName), input_name='sequenceName')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartSequencerDescriptor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DartSequencerDescriptorEntries is not None:
            self.DartSequencerDescriptorEntries.export(outfile, level, namespaceprefix_, name_='DartSequencerDescriptorEntries', pretty_print=pretty_print)
        if self.DartSequencerPreferences is not None:
            self.DartSequencerPreferences.export(outfile, level, namespaceprefix_, name_='DartSequencerPreferences', pretty_print=pretty_print)
        if self.DartLutPreferences is not None:
            self.DartLutPreferences.export(outfile, level, namespaceprefix_, name_='DartLutPreferences', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_DartSequencerDescriptor', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.sequenceName is not None:
            element.set('sequenceName', self.gds_format_string(self.sequenceName))
        if self.DartSequencerDescriptorEntries is not None:
            DartSequencerDescriptorEntries_ = self.DartSequencerDescriptorEntries
            DartSequencerDescriptorEntries_.to_etree(element, name_='DartSequencerDescriptorEntries', mapping_=mapping_)
        if self.DartSequencerPreferences is not None:
            DartSequencerPreferences_ = self.DartSequencerPreferences
            DartSequencerPreferences_.to_etree(element, name_='DartSequencerPreferences', mapping_=mapping_)
        if self.DartLutPreferences is not None:
            DartLutPreferences_ = self.DartLutPreferences
            DartLutPreferences_.to_etree(element, name_='DartLutPreferences', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartSequencerDescriptor'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.sequenceName is not None and 'sequenceName' not in already_processed:
            already_processed.add('sequenceName')
            showIndent(outfile, level)
            outfile.write('sequenceName="%s",\n' % (self.sequenceName,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DartSequencerDescriptorEntries is not None:
            showIndent(outfile, level)
            outfile.write('DartSequencerDescriptorEntries=model_._DartSequencerDescriptorEntries(\n')
            self.DartSequencerDescriptorEntries.exportLiteral(outfile, level, name_='DartSequencerDescriptorEntries')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DartSequencerPreferences is not None:
            showIndent(outfile, level)
            outfile.write('DartSequencerPreferences=model_._DartSequencerPreferences(\n')
            self.DartSequencerPreferences.exportLiteral(outfile, level, name_='DartSequencerPreferences')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DartLutPreferences is not None:
            showIndent(outfile, level)
            outfile.write('DartLutPreferences=model_._DartLutPreferences(\n')
            self.DartLutPreferences.exportLiteral(outfile, level, name_='DartLutPreferences')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('sequenceName', node)
        if value is not None and 'sequenceName' not in already_processed:
            already_processed.add('sequenceName')
            self.sequenceName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DartSequencerDescriptorEntries':
            obj_ = create_DartSequencerDescriptorEntries.factory()
            obj_.build(child_)
            self.set_DartSequencerDescriptorEntries(obj_)
            obj_.original_tagname_ = 'DartSequencerDescriptorEntries'
        elif nodeName_ == 'DartSequencerPreferences':
            obj_ = create_DartSequencerPreferences.factory()
            obj_.build(child_)
            self.set_DartSequencerPreferences(obj_)
            obj_.original_tagname_ = 'DartSequencerPreferences'
        elif nodeName_ == 'DartLutPreferences':
            obj_ = create_DartLutPreferences.factory()
            obj_.build(child_)
            self.set_DartLutPreferences(obj_)
            obj_.original_tagname_ = 'DartLutPreferences'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartSequencerDescriptor


class createDartFile(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('version', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('DartSequencerDescriptor', '_DartSequencerDescriptor', 0, 0, {'type': '_DartSequencerDescriptor', 'name': 'DartSequencerDescriptor'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, version='1.0', DartSequencerDescriptor=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('sequence','DartFile')
        self.attrib = ['version']
        self.children = ['DartSequencerDescriptor']
        self.parent = None
        self._version = _cast(None, version)
        self._DartSequencerDescriptor = DartSequencerDescriptor
        update_node(self,self.troot,'sequence')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, createDartFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if createDartFile.subclass:
            return createDartFile.subclass(*args_, **kwargs_)
        else:
            return createDartFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DartSequencerDescriptor(self): return self._DartSequencerDescriptor
    def set_DartSequencerDescriptor(self, value):
        if value is not None:
            checkclass(value, create_DartSequencerDescriptor)
            value.parent = self
        self._DartSequencerDescriptor = value
    DartSequencerDescriptor = property(get_DartSequencerDescriptor, set_DartSequencerDescriptor)
    def get_version(self): return self._version
    def set_version(self, value):
        self._version = value
        update_node(self,self.troot,'sequence')
    version = property(get_version, set_version)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.DartSequencerDescriptor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DartFile', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DartFile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DartFile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DartFile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DartFile'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DartFile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DartSequencerDescriptor is not None:
            self.DartSequencerDescriptor.export(outfile, level, namespaceprefix_, name_='DartSequencerDescriptor', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='DartFile', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.version is not None:
            element.set('version', self.gds_format_string(self.version))
        if self.DartSequencerDescriptor is not None:
            DartSequencerDescriptor_ = self.DartSequencerDescriptor
            DartSequencerDescriptor_.to_etree(element, name_='DartSequencerDescriptor', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='DartFile'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DartSequencerDescriptor is not None:
            showIndent(outfile, level)
            outfile.write('DartSequencerDescriptor=model_._DartSequencerDescriptor(\n')
            self.DartSequencerDescriptor.exportLiteral(outfile, level, name_='DartSequencerDescriptor')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DartSequencerDescriptor':
            obj_ = create_DartSequencerDescriptor.factory()
            obj_.build(child_)
            self.set_DartSequencerDescriptor(obj_)
            obj_.original_tagname_ = 'DartSequencerDescriptor'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class createDartFile


GDSClassesMapping = {
    'DartFile': createDartFile,
}


USAGE_TEXT = """
Usage: python <createParser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from sequence import *\n\n')
        sys.stdout.write('import sequence as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "createDartFile",
    "create_DartLutPreferences",
    "create_DartSequencerDescriptor",
    "create_DartSequencerDescriptorEntries",
    "create_DartSequencerDescriptorEntry",
    "create_DartSequencerDescriptorGroup",
    "create_DartSequencerPreferences"
]
