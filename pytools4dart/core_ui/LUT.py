#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Feb 22 20:59:49 2019 by generateDS.py version 2.29.25.
# Python 2.7.3 (default, Oct 26 2016, 21:01:49)  [GCC 4.6.3]
#
# Command line options:
#   ('-m', '')
#   ('-f', '')
#   ('--always-export-default', '')
#   ('--export', 'write literal etree')
#   ('-u', 'core_ui.user_methods')
#   ('-p', 'create')
#   ('--post-attrib-setter', "update_node(self,self.troot,'LUT')")
#   ('--pre-ctor', "self.troot=get_gs_troot('LUT','{classname}')")
#   ('--post-ctor', "update_node(self,self.troot,'LUT')")
#   ('--imports', 'from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes')
#   ('-o', '/media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/core_ui/LUT.py')
#
# Command line arguments:
#   /media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/xsdschemas/LUT.xsd
#
# Command line:
#   /media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/venv/bin/generateDS.py -m -f --always-export-default --export="write literal etree" -u "core_ui.user_methods" -p "create" --post-attrib-setter="update_node(self,self.troot,'LUT')" --pre-ctor="self.troot=get_gs_troot('LUT','{classname}')" --post-ctor="update_node(self,self.troot,'LUT')" --imports="from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes" -o "/media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/core_ui/LUT.py" /media/DATA/Florian/IRSTEA/Scripts/pytools4dartMTD/pytools4dart/xsdschemas/LUT.xsd
#
# Current working directory (os.getcwd()):
#   pytools4dart
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_
from pytools4dart.core_ui.utils import get_gs_troot, update_node, get_path, findpaths, subpaths, set_nodes


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#

def checkclass(value, cl):
    if isinstance(value, list):
        for v in value:
            if not isinstance(v, cl):
                raise ValueError("invalid class")
    else:
        if not isinstance(value, cl):
            raise ValueError("invalid class")

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class createDartFile(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('version', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('DartLUT', '_DartLUT', 0, 0, {u'maxOccurs': u'1', u'type': u'_DartLUT', u'name': u'DartLUT', u'minOccurs': u'1'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, version=None, DartLUT=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','DartFile')
        self.attrib = ['version']
        self.children = ['DartLUT']
        self.parent = None
        self._version = _cast(None, version)
        self._DartLUT = DartLUT
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, createDartFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if createDartFile.subclass:
            return createDartFile.subclass(*args_, **kwargs_)
        else:
            return createDartFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DartLUT(self): return self._DartLUT
    def set_DartLUT(self, value):
        if value is not None:
            checkclass(value, create_DartLUT)
            value.parent = self
        self._DartLUT = value
    DartLUT = property(get_DartLUT, set_DartLUT)
    def get_version(self): return self._version
    def set_version(self, value):
        self._version = value
        update_node(self,self.troot,'LUT')
    version = property(get_version, set_version)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.DartLUT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DartFile', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DartFile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DartFile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DartFile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DartFile'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.version), input_name='version')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DartFile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DartLUT is not None:
            self.DartLUT.export(outfile, level, namespaceprefix_, name_='DartLUT', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='DartFile', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.version is not None:
            element.set('version', self.gds_format_string(self.version))
        if self.DartLUT is not None:
            DartLUT_ = self.DartLUT
            DartLUT_.to_etree(element, name_='DartLUT', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='DartFile'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version="%s",\n' % (self.version,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DartLUT is not None:
            showIndent(outfile, level)
            outfile.write('DartLUT=model_._DartLUT(\n')
            self.DartLUT.exportLiteral(outfile, level, name_='DartLUT')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DartLUT':
            obj_ = create_DartLUT.factory()
            obj_.build(child_)
            self.set_DartLUT(obj_)
            obj_.original_tagname_ = 'DartLUT'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class createDartFile


class create_DartLUT(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('baseSimulationName', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('dataFormat', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('isLambdaSequence', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('modelBRDFNumberCoefficient', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('sequenceName', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('simulationNumber', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('DataFile', '_DataFile', 0, 0, {u'maxOccurs': u'1', u'type': u'_DataFile', u'name': u'DataFile', u'minOccurs': u'1'}, None),
        MemberSpec_('SpectralIntervals', '_SpectralIntervals', 0, 0, {u'maxOccurs': u'1', u'type': u'_SpectralIntervals', u'name': u'SpectralIntervals', u'minOccurs': u'1'}, None),
        MemberSpec_('StaticLUTReflectanceParameters', '_StaticLUTReflectanceParameters', 0, 0, {u'maxOccurs': u'1', u'type': u'_StaticLUTReflectanceParameters', u'name': u'StaticLUTReflectanceParameters', u'minOccurs': u'1'}, None),
        MemberSpec_('StaticLUTCoefficientParameters', '_StaticLUTCoefficientParameters', 0, 0, {u'maxOccurs': u'1', u'type': u'_StaticLUTCoefficientParameters', u'name': u'StaticLUTCoefficientParameters', u'minOccurs': u'1'}, None),
        MemberSpec_('FreeParametersLUTReflectance', '_FreeParametersLUTReflectance', 0, 0, {u'maxOccurs': u'1', u'type': u'_FreeParametersLUTReflectance', u'name': u'FreeParametersLUTReflectance', u'minOccurs': u'1'}, None),
        MemberSpec_('FreeParametersLUTCoefficient', '_FreeParametersLUTCoefficient', 0, 0, {u'maxOccurs': u'1', u'type': u'_FreeParametersLUTCoefficient', u'name': u'FreeParametersLUTCoefficient', u'minOccurs': u'1'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, baseSimulationName=None, dataFormat=None, isLambdaSequence=None, modelBRDFNumberCoefficient=None, sequenceName=None, simulationNumber=None, DataFile=None, SpectralIntervals=None, StaticLUTReflectanceParameters=None, StaticLUTCoefficientParameters=None, FreeParametersLUTReflectance=None, FreeParametersLUTCoefficient=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_DartLUT')
        self.attrib = ['baseSimulationName', 'dataFormat', 'isLambdaSequence', 'modelBRDFNumberCoefficient', 'sequenceName', 'simulationNumber']
        self.children = ['DataFile', 'SpectralIntervals', 'StaticLUTReflectanceParameters', 'StaticLUTCoefficientParameters', 'FreeParametersLUTReflectance', 'FreeParametersLUTCoefficient']
        self.parent = None
        self._baseSimulationName = _cast(None, baseSimulationName)
        self._dataFormat = _cast(None, dataFormat)
        self._isLambdaSequence = _cast(int, isLambdaSequence)
        self._modelBRDFNumberCoefficient = _cast(int, modelBRDFNumberCoefficient)
        self._sequenceName = _cast(None, sequenceName)
        self._simulationNumber = _cast(int, simulationNumber)
        self._DataFile = DataFile
        self._SpectralIntervals = SpectralIntervals
        self._StaticLUTReflectanceParameters = StaticLUTReflectanceParameters
        self._StaticLUTCoefficientParameters = StaticLUTCoefficientParameters
        self._FreeParametersLUTReflectance = FreeParametersLUTReflectance
        self._FreeParametersLUTCoefficient = FreeParametersLUTCoefficient
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DartLUT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DartLUT.subclass:
            return create_DartLUT.subclass(*args_, **kwargs_)
        else:
            return create_DartLUT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DataFile(self): return self._DataFile
    def set_DataFile(self, value):
        if value is not None:
            checkclass(value, create_DataFile)
            value.parent = self
        self._DataFile = value
    DataFile = property(get_DataFile, set_DataFile)
    def get_SpectralIntervals(self): return self._SpectralIntervals
    def set_SpectralIntervals(self, value):
        if value is not None:
            checkclass(value, create_SpectralIntervals)
            value.parent = self
        self._SpectralIntervals = value
    SpectralIntervals = property(get_SpectralIntervals, set_SpectralIntervals)
    def get_StaticLUTReflectanceParameters(self): return self._StaticLUTReflectanceParameters
    def set_StaticLUTReflectanceParameters(self, value):
        if value is not None:
            checkclass(value, create_StaticLUTReflectanceParameters)
            value.parent = self
        self._StaticLUTReflectanceParameters = value
    StaticLUTReflectanceParameters = property(get_StaticLUTReflectanceParameters, set_StaticLUTReflectanceParameters)
    def get_StaticLUTCoefficientParameters(self): return self._StaticLUTCoefficientParameters
    def set_StaticLUTCoefficientParameters(self, value):
        if value is not None:
            checkclass(value, create_StaticLUTCoefficientParameters)
            value.parent = self
        self._StaticLUTCoefficientParameters = value
    StaticLUTCoefficientParameters = property(get_StaticLUTCoefficientParameters, set_StaticLUTCoefficientParameters)
    def get_FreeParametersLUTReflectance(self): return self._FreeParametersLUTReflectance
    def set_FreeParametersLUTReflectance(self, value):
        if value is not None:
            checkclass(value, create_FreeParametersLUTReflectance)
            value.parent = self
        self._FreeParametersLUTReflectance = value
    FreeParametersLUTReflectance = property(get_FreeParametersLUTReflectance, set_FreeParametersLUTReflectance)
    def get_FreeParametersLUTCoefficient(self): return self._FreeParametersLUTCoefficient
    def set_FreeParametersLUTCoefficient(self, value):
        if value is not None:
            checkclass(value, create_FreeParametersLUTCoefficient)
            value.parent = self
        self._FreeParametersLUTCoefficient = value
    FreeParametersLUTCoefficient = property(get_FreeParametersLUTCoefficient, set_FreeParametersLUTCoefficient)
    def get_baseSimulationName(self): return self._baseSimulationName
    def set_baseSimulationName(self, value):
        self._baseSimulationName = value
        update_node(self,self.troot,'LUT')
    baseSimulationName = property(get_baseSimulationName, set_baseSimulationName)
    def get_dataFormat(self): return self._dataFormat
    def set_dataFormat(self, value):
        self._dataFormat = value
        update_node(self,self.troot,'LUT')
    dataFormat = property(get_dataFormat, set_dataFormat)
    def get_isLambdaSequence(self): return self._isLambdaSequence
    def set_isLambdaSequence(self, value):
        self._isLambdaSequence = value
        update_node(self,self.troot,'LUT')
    isLambdaSequence = property(get_isLambdaSequence, set_isLambdaSequence)
    def get_modelBRDFNumberCoefficient(self): return self._modelBRDFNumberCoefficient
    def set_modelBRDFNumberCoefficient(self, value):
        self._modelBRDFNumberCoefficient = value
        update_node(self,self.troot,'LUT')
    modelBRDFNumberCoefficient = property(get_modelBRDFNumberCoefficient, set_modelBRDFNumberCoefficient)
    def get_sequenceName(self): return self._sequenceName
    def set_sequenceName(self, value):
        self._sequenceName = value
        update_node(self,self.troot,'LUT')
    sequenceName = property(get_sequenceName, set_sequenceName)
    def get_simulationNumber(self): return self._simulationNumber
    def set_simulationNumber(self, value):
        self._simulationNumber = value
        update_node(self,self.troot,'LUT')
    simulationNumber = property(get_simulationNumber, set_simulationNumber)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.DataFile is not None or
            self.SpectralIntervals is not None or
            self.StaticLUTReflectanceParameters is not None or
            self.StaticLUTCoefficientParameters is not None or
            self.FreeParametersLUTReflectance is not None or
            self.FreeParametersLUTCoefficient is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DartLUT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DartLUT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DartLUT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DartLUT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DartLUT'):
        if self.baseSimulationName is not None and 'baseSimulationName' not in already_processed:
            already_processed.add('baseSimulationName')
            outfile.write(' baseSimulationName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.baseSimulationName), input_name='baseSimulationName')), ))
        if self.dataFormat is not None and 'dataFormat' not in already_processed:
            already_processed.add('dataFormat')
            outfile.write(' dataFormat=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dataFormat), input_name='dataFormat')), ))
        if self.isLambdaSequence is not None and 'isLambdaSequence' not in already_processed:
            already_processed.add('isLambdaSequence')
            outfile.write(' isLambdaSequence="%s"' % self.gds_format_integer(self.isLambdaSequence, input_name='isLambdaSequence'))
        if self.modelBRDFNumberCoefficient is not None and 'modelBRDFNumberCoefficient' not in already_processed:
            already_processed.add('modelBRDFNumberCoefficient')
            outfile.write(' modelBRDFNumberCoefficient="%s"' % self.gds_format_integer(self.modelBRDFNumberCoefficient, input_name='modelBRDFNumberCoefficient'))
        if self.sequenceName is not None and 'sequenceName' not in already_processed:
            already_processed.add('sequenceName')
            outfile.write(' sequenceName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.sequenceName), input_name='sequenceName')), ))
        if self.simulationNumber is not None and 'simulationNumber' not in already_processed:
            already_processed.add('simulationNumber')
            outfile.write(' simulationNumber="%s"' % self.gds_format_integer(self.simulationNumber, input_name='simulationNumber'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DartLUT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DataFile is not None:
            self.DataFile.export(outfile, level, namespaceprefix_, name_='DataFile', pretty_print=pretty_print)
        if self.SpectralIntervals is not None:
            self.SpectralIntervals.export(outfile, level, namespaceprefix_, name_='SpectralIntervals', pretty_print=pretty_print)
        if self.StaticLUTReflectanceParameters is not None:
            self.StaticLUTReflectanceParameters.export(outfile, level, namespaceprefix_, name_='StaticLUTReflectanceParameters', pretty_print=pretty_print)
        if self.StaticLUTCoefficientParameters is not None:
            self.StaticLUTCoefficientParameters.export(outfile, level, namespaceprefix_, name_='StaticLUTCoefficientParameters', pretty_print=pretty_print)
        if self.FreeParametersLUTReflectance is not None:
            self.FreeParametersLUTReflectance.export(outfile, level, namespaceprefix_, name_='FreeParametersLUTReflectance', pretty_print=pretty_print)
        if self.FreeParametersLUTCoefficient is not None:
            self.FreeParametersLUTCoefficient.export(outfile, level, namespaceprefix_, name_='FreeParametersLUTCoefficient', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_DartLUT', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.baseSimulationName is not None:
            element.set('baseSimulationName', self.gds_format_string(self.baseSimulationName))
        if self.dataFormat is not None:
            element.set('dataFormat', self.gds_format_string(self.dataFormat))
        if self.isLambdaSequence is not None:
            element.set('isLambdaSequence', self.gds_format_integer(self.isLambdaSequence))
        if self.modelBRDFNumberCoefficient is not None:
            element.set('modelBRDFNumberCoefficient', self.gds_format_integer(self.modelBRDFNumberCoefficient))
        if self.sequenceName is not None:
            element.set('sequenceName', self.gds_format_string(self.sequenceName))
        if self.simulationNumber is not None:
            element.set('simulationNumber', self.gds_format_integer(self.simulationNumber))
        if self.DataFile is not None:
            DataFile_ = self.DataFile
            DataFile_.to_etree(element, name_='DataFile', mapping_=mapping_)
        if self.SpectralIntervals is not None:
            SpectralIntervals_ = self.SpectralIntervals
            SpectralIntervals_.to_etree(element, name_='SpectralIntervals', mapping_=mapping_)
        if self.StaticLUTReflectanceParameters is not None:
            StaticLUTReflectanceParameters_ = self.StaticLUTReflectanceParameters
            StaticLUTReflectanceParameters_.to_etree(element, name_='StaticLUTReflectanceParameters', mapping_=mapping_)
        if self.StaticLUTCoefficientParameters is not None:
            StaticLUTCoefficientParameters_ = self.StaticLUTCoefficientParameters
            StaticLUTCoefficientParameters_.to_etree(element, name_='StaticLUTCoefficientParameters', mapping_=mapping_)
        if self.FreeParametersLUTReflectance is not None:
            FreeParametersLUTReflectance_ = self.FreeParametersLUTReflectance
            FreeParametersLUTReflectance_.to_etree(element, name_='FreeParametersLUTReflectance', mapping_=mapping_)
        if self.FreeParametersLUTCoefficient is not None:
            FreeParametersLUTCoefficient_ = self.FreeParametersLUTCoefficient
            FreeParametersLUTCoefficient_.to_etree(element, name_='FreeParametersLUTCoefficient', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DartLUT'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.baseSimulationName is not None and 'baseSimulationName' not in already_processed:
            already_processed.add('baseSimulationName')
            showIndent(outfile, level)
            outfile.write('baseSimulationName="%s",\n' % (self.baseSimulationName,))
        if self.dataFormat is not None and 'dataFormat' not in already_processed:
            already_processed.add('dataFormat')
            showIndent(outfile, level)
            outfile.write('dataFormat="%s",\n' % (self.dataFormat,))
        if self.isLambdaSequence is not None and 'isLambdaSequence' not in already_processed:
            already_processed.add('isLambdaSequence')
            showIndent(outfile, level)
            outfile.write('isLambdaSequence=%d,\n' % (self.isLambdaSequence,))
        if self.modelBRDFNumberCoefficient is not None and 'modelBRDFNumberCoefficient' not in already_processed:
            already_processed.add('modelBRDFNumberCoefficient')
            showIndent(outfile, level)
            outfile.write('modelBRDFNumberCoefficient=%d,\n' % (self.modelBRDFNumberCoefficient,))
        if self.sequenceName is not None and 'sequenceName' not in already_processed:
            already_processed.add('sequenceName')
            showIndent(outfile, level)
            outfile.write('sequenceName="%s",\n' % (self.sequenceName,))
        if self.simulationNumber is not None and 'simulationNumber' not in already_processed:
            already_processed.add('simulationNumber')
            showIndent(outfile, level)
            outfile.write('simulationNumber=%d,\n' % (self.simulationNumber,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DataFile is not None:
            showIndent(outfile, level)
            outfile.write('DataFile=model_._DataFile(\n')
            self.DataFile.exportLiteral(outfile, level, name_='DataFile')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SpectralIntervals is not None:
            showIndent(outfile, level)
            outfile.write('SpectralIntervals=model_._SpectralIntervals(\n')
            self.SpectralIntervals.exportLiteral(outfile, level, name_='SpectralIntervals')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.StaticLUTReflectanceParameters is not None:
            showIndent(outfile, level)
            outfile.write('StaticLUTReflectanceParameters=model_._StaticLUTReflectanceParameters(\n')
            self.StaticLUTReflectanceParameters.exportLiteral(outfile, level, name_='StaticLUTReflectanceParameters')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.StaticLUTCoefficientParameters is not None:
            showIndent(outfile, level)
            outfile.write('StaticLUTCoefficientParameters=model_._StaticLUTCoefficientParameters(\n')
            self.StaticLUTCoefficientParameters.exportLiteral(outfile, level, name_='StaticLUTCoefficientParameters')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FreeParametersLUTReflectance is not None:
            showIndent(outfile, level)
            outfile.write('FreeParametersLUTReflectance=model_._FreeParametersLUTReflectance(\n')
            self.FreeParametersLUTReflectance.exportLiteral(outfile, level, name_='FreeParametersLUTReflectance')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FreeParametersLUTCoefficient is not None:
            showIndent(outfile, level)
            outfile.write('FreeParametersLUTCoefficient=model_._FreeParametersLUTCoefficient(\n')
            self.FreeParametersLUTCoefficient.exportLiteral(outfile, level, name_='FreeParametersLUTCoefficient')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('baseSimulationName', node)
        if value is not None and 'baseSimulationName' not in already_processed:
            already_processed.add('baseSimulationName')
            self.baseSimulationName = value
        value = find_attr_value_('dataFormat', node)
        if value is not None and 'dataFormat' not in already_processed:
            already_processed.add('dataFormat')
            self.dataFormat = value
        value = find_attr_value_('isLambdaSequence', node)
        if value is not None and 'isLambdaSequence' not in already_processed:
            already_processed.add('isLambdaSequence')
            try:
                self.isLambdaSequence = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('modelBRDFNumberCoefficient', node)
        if value is not None and 'modelBRDFNumberCoefficient' not in already_processed:
            already_processed.add('modelBRDFNumberCoefficient')
            try:
                self.modelBRDFNumberCoefficient = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('sequenceName', node)
        if value is not None and 'sequenceName' not in already_processed:
            already_processed.add('sequenceName')
            self.sequenceName = value
        value = find_attr_value_('simulationNumber', node)
        if value is not None and 'simulationNumber' not in already_processed:
            already_processed.add('simulationNumber')
            try:
                self.simulationNumber = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataFile':
            obj_ = create_DataFile.factory()
            obj_.build(child_)
            self.set_DataFile(obj_)
            obj_.original_tagname_ = 'DataFile'
        elif nodeName_ == 'SpectralIntervals':
            obj_ = create_SpectralIntervals.factory()
            obj_.build(child_)
            self.set_SpectralIntervals(obj_)
            obj_.original_tagname_ = 'SpectralIntervals'
        elif nodeName_ == 'StaticLUTReflectanceParameters':
            obj_ = create_StaticLUTReflectanceParameters.factory()
            obj_.build(child_)
            self.set_StaticLUTReflectanceParameters(obj_)
            obj_.original_tagname_ = 'StaticLUTReflectanceParameters'
        elif nodeName_ == 'StaticLUTCoefficientParameters':
            obj_ = create_StaticLUTCoefficientParameters.factory()
            obj_.build(child_)
            self.set_StaticLUTCoefficientParameters(obj_)
            obj_.original_tagname_ = 'StaticLUTCoefficientParameters'
        elif nodeName_ == 'FreeParametersLUTReflectance':
            obj_ = create_FreeParametersLUTReflectance.factory()
            obj_.build(child_)
            self.set_FreeParametersLUTReflectance(obj_)
            obj_.original_tagname_ = 'FreeParametersLUTReflectance'
        elif nodeName_ == 'FreeParametersLUTCoefficient':
            obj_ = create_FreeParametersLUTCoefficient.factory()
            obj_.build(child_)
            self.set_FreeParametersLUTCoefficient(obj_)
            obj_.original_tagname_ = 'FreeParametersLUTCoefficient'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DartLUT


class create_DataFile(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Property', '_Property', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'_Property', u'name': u'Property', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_DataFile')
        self.attrib = ['']
        self.children = ['Property']
        self.parent = None
        if Property is None:
            self._Property = []
        else:
            self._Property = Property
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_DataFile)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_DataFile.subclass:
            return create_DataFile.subclass(*args_, **kwargs_)
        else:
            return create_DataFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self._Property
    def set_Property(self, value):
        if value is not None:
            checkclass(value, create_Property)
            for v in value:
                v.parent = self
        self._Property = value
    def add_Property(self, value):
        value.parent = self
        self._Property.append(value)
    def insert_Property_at(self, index, value):
        value.parent = self
        self.Property.insert(index, value)
    def replace_Property_at(self, index, value):
        value.parent = self
        self.Property[index] = value
    Property = property(get_Property, set_Property)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_DataFile', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_DataFile')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_DataFile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_DataFile', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_DataFile'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_DataFile', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespaceprefix_, name_='Property', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_DataFile', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for Property_ in self.Property:
            Property_.to_etree(element, name_='Property', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_DataFile'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Property=[\n')
        level += 1
        for Property_ in self.Property:
            showIndent(outfile, level)
            outfile.write('model_._Property(\n')
            Property_.exportLiteral(outfile, level, name_='_Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.Property = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = create_Property.factory()
            obj_.build(child_)
            self.add_Property(obj_)
            obj_.original_tagname_ = 'Property'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_DataFile


class create_Property(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', 'xsd:string', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, name=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_Property')
        self.attrib = ['name']
        self.children = []
        self.parent = None
        self._name = _cast(None, name)
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_Property)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_Property.subclass:
            return create_Property.subclass(*args_, **kwargs_)
        else:
            return create_Property(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self._name
    def set_name(self, value):
        self._name = value
        update_node(self,self.troot,'LUT')
    name = property(get_name, set_name)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_Property', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_Property')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_Property')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_Property', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_Property'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_Property', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_Property', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.name is not None:
            element.set('name', self.gds_format_string(self.name))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_Property'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_Property


class create_SpectralIntervals(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SpectralIntervalsProperties', 'SpectralIntervalsPropertiesType', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'SpectralIntervalsPropertiesType', u'name': u'SpectralIntervalsProperties', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SpectralIntervalsProperties=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_SpectralIntervals')
        self.attrib = ['']
        self.children = ['SpectralIntervalsProperties']
        self.parent = None
        if SpectralIntervalsProperties is None:
            self._SpectralIntervalsProperties = []
        else:
            self._SpectralIntervalsProperties = SpectralIntervalsProperties
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_SpectralIntervals)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_SpectralIntervals.subclass:
            return create_SpectralIntervals.subclass(*args_, **kwargs_)
        else:
            return create_SpectralIntervals(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpectralIntervalsProperties(self): return self._SpectralIntervalsProperties
    def set_SpectralIntervalsProperties(self, value):
        if value is not None:
            checkclass(value, createSpectralIntervalsPropertiesType)
            for v in value:
                v.parent = self
        self._SpectralIntervalsProperties = value
    def add_SpectralIntervalsProperties(self, value):
        value.parent = self
        self._SpectralIntervalsProperties.append(value)
    def insert_SpectralIntervalsProperties_at(self, index, value):
        value.parent = self
        self.SpectralIntervalsProperties.insert(index, value)
    def replace_SpectralIntervalsProperties_at(self, index, value):
        value.parent = self
        self.SpectralIntervalsProperties[index] = value
    SpectralIntervalsProperties = property(get_SpectralIntervalsProperties, set_SpectralIntervalsProperties)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.SpectralIntervalsProperties
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_SpectralIntervals', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_SpectralIntervals')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_SpectralIntervals')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_SpectralIntervals', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_SpectralIntervals'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_SpectralIntervals', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpectralIntervalsProperties_ in self.SpectralIntervalsProperties:
            SpectralIntervalsProperties_.export(outfile, level, namespaceprefix_, name_='SpectralIntervalsProperties', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_SpectralIntervals', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for SpectralIntervalsProperties_ in self.SpectralIntervalsProperties:
            SpectralIntervalsProperties_.to_etree(element, name_='SpectralIntervalsProperties', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_SpectralIntervals'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SpectralIntervalsProperties=[\n')
        level += 1
        for SpectralIntervalsProperties_ in self.SpectralIntervalsProperties:
            showIndent(outfile, level)
            outfile.write('model_.SpectralIntervalsPropertiesType(\n')
            SpectralIntervalsProperties_.exportLiteral(outfile, level, name_='SpectralIntervalsPropertiesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.SpectralIntervalsProperties = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpectralIntervalsProperties':
            obj_ = createSpectralIntervalsPropertiesType.factory()
            obj_.build(child_)
            self.add_SpectralIntervalsProperties(obj_)
            obj_.original_tagname_ = 'SpectralIntervalsProperties'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_SpectralIntervals


class create_StaticLUTReflectanceParameters(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Property', '_Property', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'_Property', u'name': u'Property', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_StaticLUTReflectanceParameters')
        self.attrib = ['']
        self.children = ['Property']
        self.parent = None
        if Property is None:
            self._Property = []
        else:
            self._Property = Property
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_StaticLUTReflectanceParameters)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_StaticLUTReflectanceParameters.subclass:
            return create_StaticLUTReflectanceParameters.subclass(*args_, **kwargs_)
        else:
            return create_StaticLUTReflectanceParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self._Property
    def set_Property(self, value):
        if value is not None:
            checkclass(value, create_Property)
            for v in value:
                v.parent = self
        self._Property = value
    def add_Property(self, value):
        value.parent = self
        self._Property.append(value)
    def insert_Property_at(self, index, value):
        value.parent = self
        self.Property.insert(index, value)
    def replace_Property_at(self, index, value):
        value.parent = self
        self.Property[index] = value
    Property = property(get_Property, set_Property)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_StaticLUTReflectanceParameters', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_StaticLUTReflectanceParameters')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_StaticLUTReflectanceParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_StaticLUTReflectanceParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_StaticLUTReflectanceParameters'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_StaticLUTReflectanceParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespaceprefix_, name_='Property', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_StaticLUTReflectanceParameters', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for Property_ in self.Property:
            Property_.to_etree(element, name_='Property', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_StaticLUTReflectanceParameters'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Property=[\n')
        level += 1
        for Property_ in self.Property:
            showIndent(outfile, level)
            outfile.write('model_._Property(\n')
            Property_.exportLiteral(outfile, level, name_='_Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.Property = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = create_Property.factory()
            obj_.build(child_)
            self.add_Property(obj_)
            obj_.original_tagname_ = 'Property'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_StaticLUTReflectanceParameters


class create_StaticLUTCoefficientParameters(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Property', '_Property', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'_Property', u'name': u'Property', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Property=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_StaticLUTCoefficientParameters')
        self.attrib = ['']
        self.children = ['Property']
        self.parent = None
        if Property is None:
            self._Property = []
        else:
            self._Property = Property
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_StaticLUTCoefficientParameters)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_StaticLUTCoefficientParameters.subclass:
            return create_StaticLUTCoefficientParameters.subclass(*args_, **kwargs_)
        else:
            return create_StaticLUTCoefficientParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self._Property
    def set_Property(self, value):
        if value is not None:
            checkclass(value, create_Property)
            for v in value:
                v.parent = self
        self._Property = value
    def add_Property(self, value):
        value.parent = self
        self._Property.append(value)
    def insert_Property_at(self, index, value):
        value.parent = self
        self.Property.insert(index, value)
    def replace_Property_at(self, index, value):
        value.parent = self
        self.Property[index] = value
    Property = property(get_Property, set_Property)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_StaticLUTCoefficientParameters', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_StaticLUTCoefficientParameters')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_StaticLUTCoefficientParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_StaticLUTCoefficientParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_StaticLUTCoefficientParameters'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_StaticLUTCoefficientParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespaceprefix_, name_='Property', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_StaticLUTCoefficientParameters', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for Property_ in self.Property:
            Property_.to_etree(element, name_='Property', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_StaticLUTCoefficientParameters'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Property=[\n')
        level += 1
        for Property_ in self.Property:
            showIndent(outfile, level)
            outfile.write('model_._Property(\n')
            Property_.exportLiteral(outfile, level, name_='_Property')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.Property = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = create_Property.factory()
            obj_.build(child_)
            self.add_Property(obj_)
            obj_.original_tagname_ = 'Property'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_StaticLUTCoefficientParameters


class create_FreeParametersLUTReflectance(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('LUTReflectanceProperty', '_LUTProperty', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'_LUTProperty', u'name': u'LUTReflectanceProperty', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, LUTReflectanceProperty=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_FreeParametersLUTReflectance')
        self.attrib = ['']
        self.children = ['LUTReflectanceProperty']
        self.parent = None
        if LUTReflectanceProperty is None:
            self._LUTReflectanceProperty = []
        else:
            self._LUTReflectanceProperty = LUTReflectanceProperty
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_FreeParametersLUTReflectance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_FreeParametersLUTReflectance.subclass:
            return create_FreeParametersLUTReflectance.subclass(*args_, **kwargs_)
        else:
            return create_FreeParametersLUTReflectance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LUTReflectanceProperty(self): return self._LUTReflectanceProperty
    def set_LUTReflectanceProperty(self, value):
        if value is not None:
            checkclass(value, create_LUTProperty)
            for v in value:
                v.parent = self
        self._LUTReflectanceProperty = value
    def add_LUTReflectanceProperty(self, value):
        value.parent = self
        self._LUTReflectanceProperty.append(value)
    def insert_LUTReflectanceProperty_at(self, index, value):
        value.parent = self
        self.LUTReflectanceProperty.insert(index, value)
    def replace_LUTReflectanceProperty_at(self, index, value):
        value.parent = self
        self.LUTReflectanceProperty[index] = value
    LUTReflectanceProperty = property(get_LUTReflectanceProperty, set_LUTReflectanceProperty)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.LUTReflectanceProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_FreeParametersLUTReflectance', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_FreeParametersLUTReflectance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_FreeParametersLUTReflectance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_FreeParametersLUTReflectance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_FreeParametersLUTReflectance'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_FreeParametersLUTReflectance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LUTReflectanceProperty_ in self.LUTReflectanceProperty:
            LUTReflectanceProperty_.export(outfile, level, namespaceprefix_, name_='LUTReflectanceProperty', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_FreeParametersLUTReflectance', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for LUTReflectanceProperty_ in self.LUTReflectanceProperty:
            LUTReflectanceProperty_.to_etree(element, name_='LUTReflectanceProperty', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_FreeParametersLUTReflectance'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('LUTReflectanceProperty=[\n')
        level += 1
        for LUTReflectanceProperty_ in self.LUTReflectanceProperty:
            showIndent(outfile, level)
            outfile.write('model_._LUTProperty(\n')
            LUTReflectanceProperty_.exportLiteral(outfile, level, name_='_LUTProperty')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.LUTReflectanceProperty = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LUTReflectanceProperty':
            obj_ = create_LUTProperty.factory()
            obj_.build(child_)
            self.add_LUTReflectanceProperty(obj_)
            obj_.original_tagname_ = 'LUTReflectanceProperty'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_FreeParametersLUTReflectance


class create_LUTProperty(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('indexLUTEquivalent', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('name', 'xsd:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('numeroBandeSpectrale', 'xsd:int', 0, 1, {'use': 'optional'}),
        MemberSpec_('spectral', 'xsd:string', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, indexLUTEquivalent=None, name=None, numeroBandeSpectrale=None, spectral=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_LUTProperty')
        self.attrib = ['indexLUTEquivalent', 'name', 'numeroBandeSpectrale', 'spectral']
        self.children = []
        self.parent = None
        self._indexLUTEquivalent = _cast(int, indexLUTEquivalent)
        self._name = _cast(None, name)
        self._numeroBandeSpectrale = _cast(int, numeroBandeSpectrale)
        self._spectral = _cast(None, spectral)
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_LUTProperty)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_LUTProperty.subclass:
            return create_LUTProperty.subclass(*args_, **kwargs_)
        else:
            return create_LUTProperty(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_indexLUTEquivalent(self): return self._indexLUTEquivalent
    def set_indexLUTEquivalent(self, value):
        self._indexLUTEquivalent = value
        update_node(self,self.troot,'LUT')
    indexLUTEquivalent = property(get_indexLUTEquivalent, set_indexLUTEquivalent)
    def get_name(self): return self._name
    def set_name(self, value):
        self._name = value
        update_node(self,self.troot,'LUT')
    name = property(get_name, set_name)
    def get_numeroBandeSpectrale(self): return self._numeroBandeSpectrale
    def set_numeroBandeSpectrale(self, value):
        self._numeroBandeSpectrale = value
        update_node(self,self.troot,'LUT')
    numeroBandeSpectrale = property(get_numeroBandeSpectrale, set_numeroBandeSpectrale)
    def get_spectral(self): return self._spectral
    def set_spectral(self, value):
        self._spectral = value
        update_node(self,self.troot,'LUT')
    spectral = property(get_spectral, set_spectral)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_LUTProperty', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_LUTProperty')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_LUTProperty')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_LUTProperty', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_LUTProperty'):
        if self.indexLUTEquivalent is not None and 'indexLUTEquivalent' not in already_processed:
            already_processed.add('indexLUTEquivalent')
            outfile.write(' indexLUTEquivalent="%s"' % self.gds_format_integer(self.indexLUTEquivalent, input_name='indexLUTEquivalent'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.numeroBandeSpectrale is not None and 'numeroBandeSpectrale' not in already_processed:
            already_processed.add('numeroBandeSpectrale')
            outfile.write(' numeroBandeSpectrale="%s"' % self.gds_format_integer(self.numeroBandeSpectrale, input_name='numeroBandeSpectrale'))
        if self.spectral is not None and 'spectral' not in already_processed:
            already_processed.add('spectral')
            outfile.write(' spectral=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.spectral), input_name='spectral')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_LUTProperty', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='_LUTProperty', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.indexLUTEquivalent is not None:
            element.set('indexLUTEquivalent', self.gds_format_integer(self.indexLUTEquivalent))
        if self.name is not None:
            element.set('name', self.gds_format_string(self.name))
        if self.numeroBandeSpectrale is not None:
            element.set('numeroBandeSpectrale', self.gds_format_integer(self.numeroBandeSpectrale))
        if self.spectral is not None:
            element.set('spectral', self.gds_format_string(self.spectral))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_LUTProperty'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.indexLUTEquivalent is not None and 'indexLUTEquivalent' not in already_processed:
            already_processed.add('indexLUTEquivalent')
            showIndent(outfile, level)
            outfile.write('indexLUTEquivalent=%d,\n' % (self.indexLUTEquivalent,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name="%s",\n' % (self.name,))
        if self.numeroBandeSpectrale is not None and 'numeroBandeSpectrale' not in already_processed:
            already_processed.add('numeroBandeSpectrale')
            showIndent(outfile, level)
            outfile.write('numeroBandeSpectrale=%d,\n' % (self.numeroBandeSpectrale,))
        if self.spectral is not None and 'spectral' not in already_processed:
            already_processed.add('spectral')
            showIndent(outfile, level)
            outfile.write('spectral="%s",\n' % (self.spectral,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('indexLUTEquivalent', node)
        if value is not None and 'indexLUTEquivalent' not in already_processed:
            already_processed.add('indexLUTEquivalent')
            try:
                self.indexLUTEquivalent = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('numeroBandeSpectrale', node)
        if value is not None and 'numeroBandeSpectrale' not in already_processed:
            already_processed.add('numeroBandeSpectrale')
            try:
                self.numeroBandeSpectrale = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('spectral', node)
        if value is not None and 'spectral' not in already_processed:
            already_processed.add('spectral')
            self.spectral = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_LUTProperty


class create_FreeParametersLUTCoefficient(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('LUTCoefficientProperty', '_LUTProperty', 1, 1, {u'maxOccurs': u'unbounded', u'type': u'_LUTProperty', u'name': u'LUTCoefficientProperty', u'minOccurs': u'0'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, LUTCoefficientProperty=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','_FreeParametersLUTCoefficient')
        self.attrib = ['']
        self.children = ['LUTCoefficientProperty']
        self.parent = None
        if LUTCoefficientProperty is None:
            self._LUTCoefficientProperty = []
        else:
            self._LUTCoefficientProperty = LUTCoefficientProperty
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, create_FreeParametersLUTCoefficient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if create_FreeParametersLUTCoefficient.subclass:
            return create_FreeParametersLUTCoefficient.subclass(*args_, **kwargs_)
        else:
            return create_FreeParametersLUTCoefficient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LUTCoefficientProperty(self): return self._LUTCoefficientProperty
    def set_LUTCoefficientProperty(self, value):
        if value is not None:
            checkclass(value, create_LUTProperty)
            for v in value:
                v.parent = self
        self._LUTCoefficientProperty = value
    def add_LUTCoefficientProperty(self, value):
        value.parent = self
        self._LUTCoefficientProperty.append(value)
    def insert_LUTCoefficientProperty_at(self, index, value):
        value.parent = self
        self.LUTCoefficientProperty.insert(index, value)
    def replace_LUTCoefficientProperty_at(self, index, value):
        value.parent = self
        self.LUTCoefficientProperty[index] = value
    LUTCoefficientProperty = property(get_LUTCoefficientProperty, set_LUTCoefficientProperty)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (
            self.LUTCoefficientProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='_FreeParametersLUTCoefficient', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('_FreeParametersLUTCoefficient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='_FreeParametersLUTCoefficient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='_FreeParametersLUTCoefficient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='_FreeParametersLUTCoefficient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='_FreeParametersLUTCoefficient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LUTCoefficientProperty_ in self.LUTCoefficientProperty:
            LUTCoefficientProperty_.export(outfile, level, namespaceprefix_, name_='LUTCoefficientProperty', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='_FreeParametersLUTCoefficient', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for LUTCoefficientProperty_ in self.LUTCoefficientProperty:
            LUTCoefficientProperty_.to_etree(element, name_='LUTCoefficientProperty', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='_FreeParametersLUTCoefficient'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('LUTCoefficientProperty=[\n')
        level += 1
        for LUTCoefficientProperty_ in self.LUTCoefficientProperty:
            showIndent(outfile, level)
            outfile.write('model_._LUTProperty(\n')
            LUTCoefficientProperty_.exportLiteral(outfile, level, name_='_LUTProperty')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.LUTCoefficientProperty = []
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LUTCoefficientProperty':
            obj_ = create_LUTProperty.factory()
            obj_.build(child_)
            self.add_LUTCoefficientProperty(obj_)
            obj_.original_tagname_ = 'LUTCoefficientProperty'
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class create_FreeParametersLUTCoefficient


class createSpectralIntervalsPropertiesType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('lambdaMax', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('lambdaMin', 'xsd:double', 0, 1, {'use': 'optional'}),
        MemberSpec_('spectralBandKey', 'xsd:int', 0, 1, {'use': 'optional'}),
    ]
    subclass = None
    superclass = None
    def __init__(self, lambdaMax=None, lambdaMin=None, spectralBandKey=None):
        self.original_tagname_ = None
        self.troot=get_gs_troot('LUT','SpectralIntervalsPropertiesType')
        self.attrib = ['lambdaMax', 'lambdaMin', 'spectralBandKey']
        self.children = []
        self.parent = None
        self._lambdaMax = _cast(float, lambdaMax)
        self._lambdaMin = _cast(float, lambdaMin)
        self._spectralBandKey = _cast(int, spectralBandKey)
        update_node(self,self.troot,'LUT')
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, createSpectralIntervalsPropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if createSpectralIntervalsPropertiesType.subclass:
            return createSpectralIntervalsPropertiesType.subclass(*args_, **kwargs_)
        else:
            return createSpectralIntervalsPropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_lambdaMax(self): return self._lambdaMax
    def set_lambdaMax(self, value):
        self._lambdaMax = value
        update_node(self,self.troot,'LUT')
    lambdaMax = property(get_lambdaMax, set_lambdaMax)
    def get_lambdaMin(self): return self._lambdaMin
    def set_lambdaMin(self, value):
        self._lambdaMin = value
        update_node(self,self.troot,'LUT')
    lambdaMin = property(get_lambdaMin, set_lambdaMin)
    def get_spectralBandKey(self): return self._spectralBandKey
    def set_spectralBandKey(self, value):
        self._spectralBandKey = value
        update_node(self,self.troot,'LUT')
    spectralBandKey = property(get_spectralBandKey, set_spectralBandKey)
    def copy(self):
        obj_ = self.factory()
        return(obj_.build(self.to_etree()))
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='SpectralIntervalsPropertiesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpectralIntervalsPropertiesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpectralIntervalsPropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='SpectralIntervalsPropertiesType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpectralIntervalsPropertiesType'):
        if self.lambdaMax is not None and 'lambdaMax' not in already_processed:
            already_processed.add('lambdaMax')
            outfile.write(' lambdaMax="%s"' % self.gds_format_double(self.lambdaMax, input_name='lambdaMax'))
        if self.lambdaMin is not None and 'lambdaMin' not in already_processed:
            already_processed.add('lambdaMin')
            outfile.write(' lambdaMin="%s"' % self.gds_format_double(self.lambdaMin, input_name='lambdaMin'))
        if self.spectralBandKey is not None and 'spectralBandKey' not in already_processed:
            already_processed.add('spectralBandKey')
            outfile.write(' spectralBandKey="%s"' % self.gds_format_integer(self.spectralBandKey, input_name='spectralBandKey'))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='SpectralIntervalsPropertiesType', fromsubclass_=False, pretty_print=True):
        pass
    def to_etree(self, parent_element=None, name_='SpectralIntervalsPropertiesType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.lambdaMax is not None:
            element.set('lambdaMax', self.gds_format_double(self.lambdaMax))
        if self.lambdaMin is not None:
            element.set('lambdaMin', self.gds_format_double(self.lambdaMin))
        if self.spectralBandKey is not None:
            element.set('spectralBandKey', self.gds_format_integer(self.spectralBandKey))
        if mapping_ is not None:
            mapping_[id(self)] = element
        return element
    def exportLiteral(self, outfile, level, name_='SpectralIntervalsPropertiesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.lambdaMax is not None and 'lambdaMax' not in already_processed:
            already_processed.add('lambdaMax')
            showIndent(outfile, level)
            outfile.write('lambdaMax=%e,\n' % (self.lambdaMax,))
        if self.lambdaMin is not None and 'lambdaMin' not in already_processed:
            already_processed.add('lambdaMin')
            showIndent(outfile, level)
            outfile.write('lambdaMin=%e,\n' % (self.lambdaMin,))
        if self.spectralBandKey is not None and 'spectralBandKey' not in already_processed:
            already_processed.add('spectralBandKey')
            showIndent(outfile, level)
            outfile.write('spectralBandKey=%d,\n' % (self.spectralBandKey,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('lambdaMax', node)
        if value is not None and 'lambdaMax' not in already_processed:
            already_processed.add('lambdaMax')
            try:
                self.lambdaMax = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (lambdaMax): %s' % exp)
        value = find_attr_value_('lambdaMin', node)
        if value is not None and 'lambdaMin' not in already_processed:
            already_processed.add('lambdaMin')
            try:
                self.lambdaMin = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (lambdaMin): %s' % exp)
        value = find_attr_value_('spectralBandKey', node)
        if value is not None and 'spectralBandKey' not in already_processed:
            already_processed.add('spectralBandKey')
            try:
                self.spectralBandKey = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    
    def to_string(self, pretty_print=True):
        return etree_.tostring(self.to_etree(), pretty_print=pretty_print)
        
        
    def path(self, index=True):
        """
        Get the dartnode path of the corenode
        Parameters
        ----------
        corenode: object
            a core object
    
        index: bool
    
            If True gets the dartnode path with index if list,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction[0]'
    
            If False gets the dartnode path without index,
            e.g. 'Coeff_diff.AirMultiFunctions.AirFunction'
    
        Returns
        -------
            str
        """

        return get_path(self, index=index)
        
                         
    def findpaths(self, pat, case=False, regex=True):
        return findpaths(self, pat=pat, case=case, regex=regex)
    
    
    def subpaths(self):
        return subpaths(self)

    
    def set_nodes(self, **kwargs):
        return set_nodes(self, **kwargs)

    # end class createSpectralIntervalsPropertiesType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <createParser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DartFile'
        rootClass = createDartFile
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from LUT import *\n\n')
        sys.stdout.write('import LUT as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "createDartFile",
    "createSpectralIntervalsPropertiesType",
    "create_DartLUT",
    "create_DataFile",
    "create_FreeParametersLUTCoefficient",
    "create_FreeParametersLUTReflectance",
    "create_LUTProperty",
    "create_Property",
    "create_SpectralIntervals",
    "create_StaticLUTCoefficientParameters",
    "create_StaticLUTReflectanceParameters"
]
