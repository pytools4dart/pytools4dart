.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  APT_CACHE_DIR: "$CI_PROJECT_DIR/.cache/apt"


stages:
  - download
  - build
  - deploy

### To work with artifacts
#dart:
#  stage: download
#  image: python:latest
#  script:
#    - mkdir -p cache
#    - cd cache
#    - curl -C - $DART_URL_WIN -o dart.zip
#    - curl -C - $DART_URL_LINUX -o dart.tar.gz
#    - ls
#  cache:
#    key: dart-cache
#    paths:
#      - cache
#  artifacts:
#    paths:
#      - cache
#    when: always
#    expire_in: 2h
###

win-dart:
  extends:
    - .shared_windows_runners
  stage: download
  script:
    - mkdir -Force cache
    - cd cache
    - curl.exe -C - $env:DART_URL_WIN -o dart.zip
    - ls
  cache:
    key: win-cache
    paths:
      - cache
  only:
    - schedules

linux-dart:
  stage: download
  image: python:latest
  script:
    - mkdir -p cache
    - cd cache
    - curl -C - $DART_URL_LINUX -o dart.tar.gz
    - ls
  cache:
    key: linux-cache
    paths:
      - cache
  only:
    - schedules


win-build:
  extends:
    - .shared_windows_runners
  stage: build
  script:
    - $env:projectdir = pwd
    - $env:cachedir = "${env:projectdir}\cache"
    - ls $env:cachedir
    - gitlab-ci\conda-build.ps1

    # Takes around 180s (3min)
    - $dartzip = "${env:cachedir}\dart.zip"
    - $env:dartdir = "${env:userprofile}\DART"
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'${env:dartdir}', verbose=True)"
    - Write-Host "DART content:"
    - ls $env:dartdir

    - cd pytools4dart\examples
    - python -c "import pytools4dart as ptd; ptd.configure(r'${env:dartdir}')"
    - python -c "import generateDS; import tinyobjloader; import gdecomp; import laspy; import pytools4dart"
    - python use_case_0.py
    - python use_case_1.py
    - python use_case_2.py
    - python use_case_3.py
    - python use_case_4.py
    - python use_case_5.py
    - python use_case_6.py
    - python use_case_7.py
  cache:
    key: win-cache
    paths:
      - cache
    policy: pull
  only:
    - windows


conda-build:
  stage: build
  image: pytools4dart/miniconda-build:latest
  script:
    - ls cache
    - conda init bash
    - source ~/.bashrc
    - conda activate ptdvenv
    - pip install .
    - dartzip=$(pwd)/cache/dart.tar.gz
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'~/DART', verbose=True)"
    # check examples
    - cd pytools4dart/examples
    - python -c 'import pytools4dart as ptd; print(ptd.__version__)'
    - python -c 'import pytools4dart as ptd; ptd.configure("~/DART")'
    - python use_case_0.py
#    - python use_case_1.py
#    - python use_case_2.py
#    - python use_case_3.py
#    - python use_case_4.py
#    - python use_case_5.py
#    - python use_case_6.py
#    - python use_case_7.py
  cache:
    key: linux-cache
    paths:
      - cache
    policy: pull
  only:
    - schedules


pip-build:
  stage: build
  image: pytools4dart/pip-build:latest
  script:
    - ls cache
    # install linux dependencies
    - pip install .
    # install DART
    - dartzip=$ptd/cache/dart.tar.gz
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'~/DART', verbose=True)"
    # check examples
    - cd pytools4dart/examples
    - python -c 'import pytools4dart as ptd; ptd.configure("~/DART")'
    - python use_case_0.py
#    - python use_case_1.py
#    - python use_case_2.py
#    - python use_case_3.py
#    - python use_case_4.py
#    - python use_case_5.py
#    - python use_case_6.py
#    - python use_case_7.py
  cache:
    key: linux-cache
    paths:
      - cache
    policy: pull
  only:
    - schedules


pages:
  stage: deploy
  image: pytools4dart/pip-build:latest
  script:
    - python -V  # Print out python version for debugging
    - python setup.py develop
    # install DART
    - dartzip=$ptd/cache/dart.tar.gz
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'~/DART', verbose=True)"
    # configure, updating API with current DART version
    - cd pytools4dart/examples
    - python -c 'import pytools4dart as ptd; ptd.configure("~/DART")'
    - portray as_html -c pyproject.toml
    - mv site public
  cache:
    key: linux-cache
    paths:
      - cache
    policy: pull
  artifacts:
    paths:
     - public
  only:
   - schedules

