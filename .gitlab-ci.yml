.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
#  APT_CACHE_DIR: "$CI_PROJECT_DIR/.cache/apt"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
#cache:
#  paths:
#  - .cache/pip
#  - ptdvenv/


stages:
  - download
  - build
  - deploy

#dart:
#  stage: download
#  image: python:latest
#  script:
#    - mkdir -p cache
#    - cd cache
#    - curl -C - $DART_URL_WIN -o dart.zip
#    - curl -C - $DART_URL_LINUX -o dart.tar.gz
#    - ls
#  cache:
#    key: dart-cache
#    paths:
#      - cache
#  artifacts:
#    paths:
#      - cache
#    when: always
#    expire_in: 2h


win-dart:
  extends:
    - .shared_windows_runners
  stage: download
  script:
    - mkdir -Force cache
    - cd cache
    - curl.exe -C - $env:DART_URL_WIN -o dart.zip
    - ls
  cache:
    key: win-cache
    paths:
      - cache

linux-dart:
  stage: download
  image: python:latest
  script:
    - mkdir -p cache
    - cd cache
    - curl -C - $DART_URL_LINUX -o dart.tar.gz
    - ls
  cache:
    key: linux-cache
    paths:
      - cache
  only:
    - schedules

win-build:
  extends:
    - .shared_windows_runners
  stage: build
  script:
    - $env:projectdir = pwd
    - $env:cachedir = "${env:projectdir}\cache"
    - ls $env:cachedir
    - gitlab-ci\conda-build.ps1

    # Takes around 180s (3min)
    - $dartzip = "${env:cachedir}\dart.zip"
    - $env:dartdir = "${env:userprofile}\DART"
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'${env:dartdir}', verbose=True)"
    - Write-Host "DART content:"
    - ls $env:dartdir

    - cd pytools4dart\examples
    - python -c "import pytools4dart as ptd; ptd.configure(r'${env:dartdir}')"
    - python -c "import generateDS; import tinyobj; import gdecomp; import laspy; import pytools4dart"
    - python use_case_0.py
    - python use_case_1.py
    - python use_case_2.py
    - python use_case_3.py
    - python use_case_4.py
    - python use_case_6.py
    - python use_case_7.py
    - python use_case_5.py

  cache:
    key: win-cache
    paths:
      - cache
    policy: pull
#  only:
#    - schedules


conda-build:
  stage: build
  image: conda/miniconda3:latest
  script:
    - ls cache
    - apt-get update -qy
    - apt-get install -y gcc g++ git unzip libgtk2.0-0 libsm6 libxft2 curl
#    - curl -u $DART_AUTH $DART_URL -o dart.tar.gz
#    - tar -xzf dart.tar.gz
#    - dest=$(pwd)/$(ls -d DART_*)
#    - cd $dest
#    - ./install-text.sh $HOME/DART
#    - cd $ptd
    - conda env create -f environment.yml
    - conda init bash
    - source ~/.bashrc
    - conda activate ptdvenv
    - pip install .
    - dartzip=$(pwd)/cache/dart.tar.gz
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'~/DART', verbose=True)"
    - cd pytools4dart/examples
    - python -c 'import pytools4dart as ptd;ptd.configure("~/DART")'
    - python use_case_0.py
    - python use_case_1.py
    - python use_case_2.py
    - python use_case_3.py
    - python use_case_4.py
  cache:
    key: linux-cache
    paths:
      - cache
    policy: pull
  only:
    - schedules

pip-build:
  stage: build
  image: python:latest
  script:
    - ptd=$(pwd)
    - apt-get update -qy
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv ptdvenv
    - source ptdvenv/bin/activate
    #- mkdir -v $APT_CACHE_DIR
    - apt-get install -y libudunits2-dev libnetcdf-dev libproj-dev libgeos-dev libgdal-dev gfortran libspatialindex-dev libgtk2.0-0 default-jdk # -o dir::cache::archives="$APT_CACHE_DIR"
    - pip install pybind11 pygdal==2.4.0.5 geopandas Cython
    - pip install -r requirements.txt
    - pip install .
    - ptd=$(pwd)
#    - cd ../
#    - curl -u $DART_AUTH $DART_URL -o dart.tar.gz
#    - tar -xzf dart.tar.gz
#    - dest=$(pwd)/$(ls -d DART_*)
#    - cd $dest
#    - ./install-text.sh $HOME/DART
#    - cd $ptd
    # install DART
    - dartzip=$ptd/cache/dart.tar.gz
    - python -c "from pytools4dart.dart import install; install(r'$dartzip', r'~/DART', verbose=True)"
    # check examples
    - cd pytools4dart/examples
    - python -c 'import pytools4dart as ptd;ptd.configure("~/DART")'
    - python use_case_0.py
    - python use_case_1.py
    - python use_case_2.py
    - python use_case_3.py
    - python use_case_4.py
  cache:
    key: linux-cache
    paths:
      - cache
    policy: pull
  only:
    - schedules


pages:
  stage: deploy
  image: python:latest
  script:
    - apt-get update -qy
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv ptdvenv
    - source ptdvenv/bin/activate
    #- mkdir -v $APT_CACHE_DIR
    - apt-get install -y libudunits2-dev libnetcdf-dev libproj-dev libgeos-dev libgdal-dev gfortran libspatialindex-dev libgtk2.0-0 # -o dir::cache::archives="$APT_CACHE_DIR"
    - pip install pybind11 pygdal==2.4.0.5 geopandas Cython
    - pip install -r requirements.txt
    - pip install .
    #- mkdir -v $APT_CACHE_DIR
    - pip install portray python-markdown-math
    - portray as_html -c pyproject.toml
    - mv site public
  artifacts:
    paths:
     - public
  only:
   - master

